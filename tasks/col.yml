# Copyright 2019-2023 Chris Croome
#
# This file is part of the Webarchitects Ansible role.
#
# The Webarchitects Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Install Ansible collection
  block:

    - name: Debug ans_col
      ansible.builtin.debug:
        var: ans_col
        verbosity: 2

    - name: Get the latest collection version running the HTTP request in a block in case a rescue is needed
      block:

        - name: "Use a HEAD request to get the latest redirect URL for {{ ans_col.name }}"
          ansible.builtin.uri:
            url: "{{ ans_col.url }}/releases/latest"
            method: HEAD
            status_code: 302
            follow_redirects: none
          check_mode: false
          changed_when: false
          register: ans_latest_headers

      rescue:

        - name: "Debug the results of the HEAD request for {{ ans_col.name }}"
          ansible.builtin.debug:
            var: ans_latest_headers.msg

        - name: "Fail if the GET request failure didn't occur when running the minimum Ansible version for {{ ans_col.name }}"
          ansible.builtin.fail:
          when: ans_core_installed_version is version(ans_ansible_core_min_version, '>')

        - name: "Use a HEAD request to get the latest redirect URL without certificate validation when using the minimum Ansible version for {{ ans_col.name }}"
          ansible.builtin.uri:
            url: "{{ ans_col.url }}/releases/latest"
            method: HEAD
            status_code: 302
            follow_redirects: none
            validate_certs: false
          check_mode: false
          changed_when: false
          register: ans_latest_headers

    - name: Setting the latest variable is not possible
      block:

        - name: Fail if the latest version has been requested but it cannot be determined
          ansible.builtin.fail:
            msg: "The URL {{ ans_col.url }}/releases/latest does not redirect to a release version so 'latest' cannot be used for {{ ans_col.name }}, please use a taged version number from {{ ans_col.url }}/tags"
          when:
            - ans_col.version == "latest"

        - name: "Set a fact for the latest and proposed version for {{ ans_col.name }}"
          ansible.builtin.set_fact:
            ans_col_version_latest: null
            ans_col_version_required: "{{ ans_col.version }}"

      when: ans_latest_headers.location is regex('releases$')

    - name: Set latest variables when possible
      block:

        - name: "Set a fact for the latest version for {{ ans_col.name }}"
          ansible.builtin.set_fact:
            ans_col_version_latest: "{{ ans_latest_headers.location | urlsplit('path') | basename | string }}"

        - name: "Set a fact for the proposed version for {{ ans_col.name }}"
          ansible.builtin.set_fact:
            ans_col_version_required: "{% if ans_col.version == 'latest' %}{{ ans_col_latest }}{% else %}{{ ans_col.version }}{% endif %}"

      when: ans_latest_headers.location is not regex('releases$')

    - name: "Set a fact for the versions of the required Ansible collection when present for {{ ans_col.name }}"
      ansible.builtin.set_fact:
        ans_col_versions_present: "{{ ans_col_existing | community.general.json_query(ans_cols_jmespath_query) | ansible.builtin.unique | sort }}"
      when: >-
        ( ans_col_comgen_ver_sort is not defined ) or
        ( ans_col_comgen_ver_sort is defined and not ans_col_comgen_ver_sort | bool )

    - name: Debug ans_col_existing
      ansible.builtin.debug:
        var: ans_col_existing
        verbosity: 2

    - name: "Set a fact for the versions of the required Ansible collection when present for {{ ans_col.name }}"
      ansible.builtin.set_fact:
        ans_col_version_present: "{{ ans_col_existing | community.general.json_query(ans_col_jmespath_query) }}"

    - name: "Set a fact for the latest version present for Ansible collection {{ ans_col.name }}"
      ansible.builtin.set_fact:
        ans_col_version_present: "{{ ans_col_versions_present | last }}"
      when:
        - ans_col_versions_present is defined
        - ans_col_versions_present != []

    - name: "Debug Ansible collection version variables for {{ ans_col.name }}"
      ansible.builtin.debug:
        msg:
          - "ans_col_version_latest: {{ ans_col_version_latest }}"
          - "ans_col_version_required: {{ ans_col_version_required }}"
          - "ans_col_version_present: {{ ans_col_version_present }}"

    - name: Install Ansible Galaxy collection
      block:

        # NOTE ansible_galaxy_install module is only present in community.general >= 3.5.0
        - name: Include tasks to install Ansible collection using the ansible_galaxy_install module
          ansible.builtin.include_tasks: col_install.yml
          when: ans_comgen | bool

        - name: Install collection in a block so failures can be rescued
          block:

            - name: "Ansible collection install using command module for {{ ans_col.name }}"
              ansible.builtin.command: "ansible-galaxy collection install {{ ans_col.name }}:{{ ans_col_version_required }} --force"
              changed_when: true
              register: ans_col_install

          rescue:

            - name: "Debug the standard error the collection install for {{ ans_pypi_pkg.name }}"
              ansible.builtin.debug:
                var: ans_col_install.stderr
                verbosity: 1

            - name: Fail if the collection install failure didn't occur when running the minimum Ansible version
              ansible.builtin.fail:
              when: ans_core_installed_version is version(ans_ansible_core_min_version, '>')

            - name: "Ansible collection install using command module without certificate verification for {{ ans_col.name }}"
              ansible.builtin.command: "ansible-galaxy collection install {{ ans_col.name }}:{{ ans_col_version_required }} --ignore-certs --force"
              changed_when: true

          when: not ans_comgen | bool

      when: >-
        ( ( not ans_downgrade | bool ) and
        ( ( ans_col_version_present is defined ) and
        ( ans_col_version_present | length > 0 ) and
        ( ans_col_version_required is version(ans_col_version_present, '>') ) ) ) or
        ( ( ans_downgrade | bool ) and
        ( ( ans_col_version_present is defined ) and
        ( ans_col_version_present | length > 0 ) and
        ( ans_col_version_required is version(ans_col_version_present, '<') ) ) )

    # TODO
    # - name: Remove Ansible Galaxy collection
    # See:
    # https://github.com/ansible/ansible/issues/67759

  tags:
    - ans
...
