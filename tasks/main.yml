# Copyright 2019-2023 Chris Croome
#
# This file is part of the Webarchitects Ansible role.
#
# The Webarchitects Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Skip the tasks in this role as ans is false
  ansible.builtin.debug:
    msg: "The ans variable need to be true for the tasks in this role to run."
  when: not ans | bool
  tags:
    - ansible

- name: Ansible tasks
  block:

    - name: Linux distribution check and requirements present
      block:

        - name: This role has only been designed to be run on Debian Trixie, Debian Bullseye, Debian Bookworm and Ubuntu Jammy
          ansible.builtin.assert:
            that:
              - ansible_distribution is regex('^Debian|Ubuntu$')
              - ansible_distribution_release is regex('^trixie|bookworm|bullseye|jammy$')
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Check that Backports are enabled on Debian Bullseye for pipx
          block:

            - name: Use apt-cache policy pipx to check if pipx is available or installed
              ansible.builtin.command: apt-cache policy pipx
              check_mode: false
              changed_when: false
              register: ans_debian_apt_cache_policy_pipx

            - name: Backports are required when pipx is not installed or unavailable on Debian Bullseye
              ansible.builtin.assert:
                that: >-
                  ( "Installed" in ans_debian_apt_cache_policy_pipx.stdout ) or
                  ( "bullseye-backports" in ans_debian_apt_cache_policy_pipx.stdout )
                fail_msg:
                  - "Backports need to be enabled on Debian Bullseye for pipx to be installed."
                  - "apt-cache policy pipx stdout {{ ans_debian_apt_cache_policy_pipx.stdout }}"
                  - "apt-cache policy pipx stderr {{ ans_debian_apt_cache_policy_pipx.stderr }}"
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

          when: ansible_distribution_release == "bullseye"

        - name: Requirements present when root
          block:

            - name: Debian Bookworm / Trixie requirements present
              ansible.builtin.apt:
                pkg: "{{ ans_pkgs_debian }}"
                state: present
              when:
                - ansible_distribution == "Debian"
                - ansible_distribution_release is regex('^bookworm|trixie$')
                - ansible_local.dpkg.installed is defined
                - ans_pkgs | ansible.builtin.difference(ansible_local.dpkg.installed) != []

            - name: Debian Bullesye requirements present
              ansible.builtin.apt:
                pkg: "{{ ans_pkgs_debian_bullseye }}"
                state: present
              when:
                - ansible_distribution == "Debian"
                - ansible_distribution_release is regex('^buster|bullseye$')
                - ansible_local.dpkg.installed is defined
                - ans_pkgs | ansible.builtin.difference(ansible_local.dpkg.installed) != []

            - name: Ubuntu requirements present
              ansible.builtin.apt:
                pkg: "{{ ans_pkgs_ubuntu }}"
                state: present
              when:
                - ansible_distribution == "Ubuntu"
                - ansible_local.dpkg.installed is defined
                - ans_pkgs | ansible.builtin.difference(ansible_local.dpkg.installed) != []

          when: ansible_effective_user_id == 0

      when: ans_distro_check | bool

    - name: Check variables
      ansible.builtin.include_tasks: checks.yml

    - name: PyPI packages configured using pipx
      ansible.builtin.include_tasks: pipx.yml

    - name: Ansible Collection tasks
      block:

        - name: Debug existing and proposed Ansible collections
          ansible.builtin.debug:
            msg:
              - "ans_col.name: {{ ans_col.name }}"
              - "ans_col.version {{ ans_col.version }}"
              - "ans_col_system_version_present: {{ ans_system_col_existing | community.general.json_query(ans_col_jmespath_query) }}"
              - "ans_col_user_version_present: {{ ans_user_col_existing | community.general.json_query(ans_col_jmespath_query) }}"
            verbosity: 1
          loop: "{{ ans_cols }}"
          loop_control:
            loop_var: ans_col
            label: "{{ ans_col.name }}"

        - name: Install Ansible collections when not already available as system or user collections
          ansible.builtin.include_tasks: col.yml
          loop: "{{ ans_cols }}"
          loop_control:
            loop_var: ans_col
            label: "{{ ans_col.name }}"
          # when: >-
          #   ( ( ansible_verbosity > 0 ) or ( ansible_check_mode | bool ) ) and
          #   ( ( ans_col.version == "latest" ) or
          #   ( ( ans_col.version != ans_system_col_existing | community.general.json_query(ans_col_jmespath_query) ) and
          #   ( ans_col.version != ans_user_col_existing | community.general.json_query(ans_col_jmespath_query) ) ) )

      when:
        - ans_cols is defined
        - ans_cols != []

    - name: Include the Bash PATH and python-argcomplete tasks when the init system is not sh
      ansible.builtin.include_tasks: bash.yml
      when: ans_init is not regex('^b?a?sh$')

  when: ans
  tags:
    - ansible
...
