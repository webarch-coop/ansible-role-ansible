# Copyright 2019-2023 Chris Croome
#
# This file is part of the Webarchitects Ansible role.
#
# The Webarchitects Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Ansible tasks
  block:

    - name: Linux distribution check and requirements present
      block:

        - name: This role has only been designed to be run on Debian Bullseye, Debian Bookworm and Ubuntu Jammy
          ansible.builtin.assert:
            that:
              - ansible_distribution is regex('^Debian|Ubuntu$')
              - ansible_distribution_release is regex('^bookworm|bullseye|jammy$')
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Check that Backports are enabled on Debian Bullseye for pipx
          block:

            - name: Use apt-cache policy pipx to check if pipx is available or installed
              ansible.builtin.command: apt-cache policy pipx
              check_mode: false
              changed_when: false
              register: ans_debian_apt_cache_policy_pipx

            - name: Backports are required when pipx is not installed or unavailable on Debian Bullseye
              ansible.builtin.assert:
                that: >-
                  ( "Installed" in ans_debian_apt_cache_policy_pipx.stdout ) or
                  ( "bullseye-backports" in ans_debian_apt_cache_policy_pipx.stdout )
                fail_msg:
                  - "Backports need to be enabled on Debian Bullseye for pipx to be installed."
                  - "apt-cache policy pipx stdout {{ ans_debian_apt_cache_policy_pipx.stdout }}"
                  - "apt-cache policy pipx stderr {{ ans_debian_apt_cache_policy_pipx.stderr }}"
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

          when: ansible_distribution_release == "bullseye"

        - name: Requirements present when root
          ansible.builtin.apt:
            pkg: "{{ ans_pkgs }}"
            state: present
          when:
            - ansible_effective_user_id == 0
            - ansible_local.dpkg.installed is defined
            - ans_pkgs | ansible.builtin.difference(ansible_local.dpkg.installed) != []

      when: ans_distro_check | bool

    - name: Check variables
      ansible.builtin.include_tasks: checks.yml

    - name: PyPI packages configured using pipx
      ansible.builtin.include_tasks: pipx.yml
      when: ans_pipx | bool

    - name: PyPI packages configured using pip
      block:

        - name: Debug PyPi packages
          ansible.builtin.debug:
            msg:
              - "ans_pypi_pkg.name: {{ ans_pypi_pkg.name }}"
              - "ans_pypi_pkg.state: {{ ans_pypi_pkg.state | default('present') }}"
              - "ans_pypi_pkg.version: {{ ans_pypi_pkg.version }}"
              - "ans_pypi_system_version_present: {{ ans_pip_system_existing | community.general.json_query(ans_pypi_pkg_version_jmespath_query) }}"
              - "ans_pypi_user_version_present: {{ ans_pip_user_existing | community.general.json_query(ans_pypi_pkg_version_jmespath_query) }}"
            verbosity: 1
          loop: "{{ ans_pypi_pkgs }}"
          loop_control:
            loop_var: ans_pypi_pkg
            label: "{{ ans_pypi_pkg.name }}"

        - name: PyPI packages configured using pip when not already available as system or user packages
          ansible.builtin.include_tasks: pip.yml
          loop: "{{ ans_pypi_pkgs }}"
          loop_control:
            loop_var: ans_pypi_pkg
            label: "{{ ans_pypi_pkg.name }}"
          when: >-
            ( ansible_verbosity > 0 ) or
            ( ansible_check_mode | bool ) or
            ( ans_pypi_pkgs is defined ) and ( ans_pypi_pkgs != [] ) and ( ( ans_pypi_pkg.version == "latest" ) or
            ( ( ans_pypi_pkg.state is defined ) and ( ans_pypi_pkg.state == "absent" ) ) or
            ( ( ans_pypi_pkg.state is defined ) and ( ans_pypi_pkg.state == "forcereinstall" ) ) or
            ( ( ans_pypi_pkg.version != ans_pip_system_existing | community.general.json_query(ans_pypi_pkg_version_jmespath_query) ) and
            ( ans_pypi_pkg.version != ans_pip_user_existing | community.general.json_query(ans_pypi_pkg_version_jmespath_query) ) ) )

      when: not ans_pipx | bool

    - name: Ansible Collection tasks
      block:

        - name: Debug existing and proposed Ansible collections
          ansible.builtin.debug:
            msg:
              - "ans_col.name: {{ ans_col.name }}"
              - "ans_col.version {{ ans_col.version }}"
              - "ans_col_system_version_present: {{ ans_system_col_existing | community.general.json_query(ans_col_jmespath_query) }}"
              - "ans_col_user_version_present: {{ ans_user_col_existing | community.general.json_query(ans_col_jmespath_query) }}"
            verbosity: 1
          loop: "{{ ans_cols }}"
          loop_control:
            loop_var: ans_col
            label: "{{ ans_col.name }}"

        - name: Install Ansible collections when not already available as system or user collections
          ansible.builtin.include_tasks: col.yml
          loop: "{{ ans_cols }}"
          loop_control:
            loop_var: ans_col
            label: "{{ ans_col.name }}"
          when: >-
            ( ( ansible_verbosity > 0 ) or ( ansible_check_mode | bool ) ) and
            ( ( ans_col.version == "latest" ) or
            ( ( ans_col.version != ans_system_col_existing | community.general.json_query(ans_col_jmespath_query) ) and
            ( ans_col.version != ans_user_col_existing | community.general.json_query(ans_col_jmespath_query) ) ) )

      when:
        - ans_cols is defined
        - ans_cols != []

    - name: Include the Bash PATH and python-argcomplete tasks when the init system is not sh
      ansible.builtin.include_tasks: bash.yml
      when: ans_init != "sh"

  when: ans
  tags:
    - ansible
...
