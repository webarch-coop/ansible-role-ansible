---
- name: Install Ansible collection
  block:

    - name: Set a fact for the proposed version when not the latest
      ansible.builtin.set_fact:
        ans_collection_proposed: "{{ col.version | string }}"
      when: col.version != "latest"

    - name: Get the latest version number
      block:

        - name: Run the HTTP request in a block in case a rescue is needed
          block:

            - name: Use a HEAD request to get the latest redirect URL
              ansible.builtin.uri:
                url: "https://github.com/ansible-collections/{{ col.name }}/releases/latest"
                method: HEAD
                status_code: 302
                follow_redirects: none
              check_mode: false
              changed_when: false
              register: ans_latest_headers

          rescue:

            - name: Debug the results on the HEAD request
              ansible.builtin.debug:
                var: ans_latest_headers.outcome

            - name: Use a HEAD request to get the latest redirect URL without certificate validation
              ansible.builtin.uri:
                url: "https://github.com/ansible-collections/{{ col.name }}/releases/latest"
                method: HEAD
                status_code: 302
                follow_redirects: none
                validate_certs: "{% if ans_installed_version == ans_default_min_version %}false{% else %}true{% endif %}"
              check_mode: false
              changed_when: false
              register: ans_latest_headers

        - name: Set a fact for the latest version
          ansible.builtin.set_fact:
            ans_collection_proposed: "{{ ans_latest_headers.location | urlsplit('path') | basename | string }}"

      when: col.version == "latest"

    - name: Check if the installed version of ansible-galaxy supports JSON output
      ansible.builtin.command: ansible-galaxy collection list --format json
      check_mode: false
      changed_when: false
      register: ans_galaxy_json
      failed_when: ans_galaxy_json.rc is not ansible.builtin.regex('^0|2$')

    - name: Query Ansible Galaxy collection when JSON output is supported
      block:

        - name: Check the installed version using ansible-galaxy collection list {{ col.name }}
          ansible.builtin.command: "ansible-galaxy collection list {{ col.name }} --format json"
          become: false
          check_mode: false
          changed_when: false
          register: ans_galaxy_collection_list

        - name: Set facts for the results of ansible-galaxy collection list
          ansible.builtin.set_fact:
            ans_galaxy_collection: "{{ ans_galaxy_collection_list.stdout | from_json }}"
            ans_galaxy_collection_versions: "{{ ans_galaxy_collection_list.stdout | from_json | json_query('*.*.version[]') }}"

        - name: Debug the installed collection list
          ansible.builtin.debug:
            var: ans_galaxy_collection
            verbosity: 2

        - name: Debug the installed collection versions
          ansible.builtin.debug:
            var: ans_galaxy_collection_versions
            verbosity: 2

        - name: Install collection using ansible_galaxy_install module
          ansible.builtin.include_tasks: collection_install.yml
          when:
            - ans_collection_proposed not in ans_galaxy_collection_versions

      when: ans_galaxy_json.rc == 0

    - name: Install collection using command module
      ansible.builtin.command: >-
        ansible-galaxy collection install
        {% if ans_installed_version == ans_default_min_version %}--ignore-certs{% endif %}
        {{ col.name }}:=={{ ans_collection_proposed }}
      become: false
      when:
        - ans_galaxy_json.rc == 2

  tags:
    - ans
...
