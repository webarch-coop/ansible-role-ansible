# Copyright 2019-2023 Chris Croome
#
# This file is part of the Webarchitects Ansible role.
#
# The Webarchitects Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Check, install, reinstall and remove PyPI packages using pipx
  block:

    - name: Debug PyPI packages
      ansible.builtin.debug:
        msg:
          - "ans_pypi_pkg.name: {{ ans_pypi_pkg.name }}"
          - "ans_pypi_pkg.state: {% if ans_pypi_pkg.state is defined %}{{ ans_pypi_pkg.state }}{% endif %}"
          - "ans_pypi_pkg.version: {% if ans_pypi_pkg.version is defined %}{{ ans_pypi_pkg.version }}{% endif %}"
          - "ans_pypi_system_version_present: {{ ans_pip_system_existing | community.general.json_query(ans_pypi_jmespath_query) }}"
          - "ans_pypi_user_version_present: {{ ans_pip_user_existing | community.general.json_query(ans_pypi_jmespath_query) }}"
        verbosity: 1
      loop: "{{ ans_pypi_pkgs }}"
      loop_control:
        loop_var: ans_pypi_pkg
        label: "{{ ans_pypi_pkg.name }}"

    - name: Remove packages installed using pip as root
      block:

        - name: "PyPi pip system package absent {{ ans_pypi_pkg.name }}"
          ansible.builtin.pip:
            name: "{{ ans_pypi_pkg.name }}"
            state: absent
            executable: "{{ ans_pip_path }}"
          loop: "{{ ans_pypi_pkgs }}"
          loop_control:
            loop_var: ans_pypi_pkg
            label: "{{ ans_pypi_pkg.name }}"
          when: ans_pip_user_existing | community.general.json_query(ans_pypi_jmespath_query) | length > 0

      rescue:

        - name: This role doesn't use --break-system-packages as root, please remove these packages manually
          ansible.builtin.fail:
            msg: "Please run: sudo pip remove --break-system-packages {{ ans_pypi_pkg.name }}"
          loop: "{{ ans_pypi_pkgs }}"
          loop_control:
            loop_var: ans_pypi_pkg
            label: "{{ ans_pypi_pkg.name }}"
          when:
            - ansible_facts.python_version is version('3.11.2', '>=')
            - ans_pip_user_existing | community.general.json_query(ans_pypi_jmespath_query) | length > 0

        - name: Removing package using pip as root failed
          ansible.builtin.fail:
            msg: "Please try removing these packages manually: sudo pip remove {{ ans_pypi_pkg.name }}"
          loop: "{{ ans_pypi_pkgs }}"
          loop_control:
            loop_var: ans_pypi_pkg
            label: "{{ ans_pypi_pkg.name }}"
          when: ans_pip_user_existing | community.general.json_query(ans_pypi_jmespath_query) | length > 0

      when: ansible_effective_user_id == 0

    - name: PyPi pip user package absent
      ansible.builtin.pip:
        name: "{{ ans_pypi_pkg.name }}"
        state: absent
        executable: "{{ ans_pip_path }}"
        extra_args: "{% if ansible_facts.python_version is version('3.11.2', '>=') %}--break-system-packages{% endif %}"
      loop: "{{ ans_pypi_pkgs }}"
      loop_control:
        loop_var: ans_pypi_pkg
        label: "{{ ans_pypi_pkg.name }}"
      when:
        - ansible_effective_user_id != 0
        - ans_pip_user_existing | community.general.json_query(ans_pypi_jmespath_query) is defined

    - name: Debug existing pipx installed Ansible version
      ansible.builtin.debug:
        var: ans_pipx_list.venvs.ansible.metadata.main_package.package_version
        verbosity: 1
      when: ans_pipx_list.venvs.ansible.metadata.main_package.package_version is defined

    - name: Install Ansible using pipx
      community.general.pipx:
        name: ansible
        source: "ansible=={{ ans_required_version }}"
        install_deps: true
        state: present
        executable: /usr/bin/pipx
      environment: "{{ ans_pipx_env }}"
      when: ans_pipx_list.venvs.ansible.metadata.main_package.package_version is not defined

    - name: Upgrade Ansible using pipx
      community.general.pipx:
        name: ansible
        source: "ansible=={{ ans_required_version }}"
        install_deps: true
        state: upgrade
        executable: /usr/bin/pipx
      environment: "{{ ans_pipx_env }}"
      when:
        - ans_pipx_list.venvs.ansible.metadata.main_package.package_version is defined
        - ans_pipx_list.venvs.ansible.metadata.main_package.package_version is version(ans_required_version, 'lt')

    - name: Set a fact for the pipx packages to be injected
      ansible.builtin.set_fact:
        ans_pipx_inject: "{{ ans_pipx_inject + [ ans_pypi_pkg.name + '==' + ans_pypi_pkg.version ] }}"
      when:
        - ans_pypi_pkg.version is defined
        - ( ans_pypi_pkg.state is not defined ) or ( ans_pypi_pkg.state == "present" )
        - ans_pypi_pkg.name != "ansible"
        # - ( ans_pip_system_existing | community.general.json_query(ans_pypi_jmespath_query) is not defined ) or ( ans_pip_system_existing | community.general.json_query(ans_pypi_jmespath_query) is version(ans_pypi_pkg.version, 'lt') )
        # - ( ans_pip_user_existing | community.general.json_query(ans_pypi_jmespath_query) is not defined ) or ( ( ans_pip_user_existing | community.general.json_query(ans_pypi_jmespath_query) is version(ans_pypi_pkg.version, 'lt') )
      loop: "{{ ans_pypi_pkgs }}"
      loop_control:
        loop_var: ans_pypi_pkg
        label: "{{ ans_pypi_pkg.name }}"

    - name: Debug the pipx packages to be injected
      ansible.builtin.debug:
        var: ans_pipx_inject
        verbosity: 1
      when: ans_pipx_inject is defined

    - name: Inject PyPI packages into the Ansible venv
      community.general.pipx:
        name: ansible
        inject_packages: "{{ ans_pipx_inject }}"
        state: inject
      environment: "{{ ans_pipx_env }}"
      when: ans_pipx_list.venv.ansible is defined

  tags:
    - ansible
...
