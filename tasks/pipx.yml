# Copyright 2019-2023 Chris Croome
#
# This file is part of the Webarchitects Ansible role.
#
# The Webarchitects Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: PyPI packages configured using pipx
  block:

    - name: Debug pip packages
      ansible.builtin.debug:
        msg:
          - "ans_pypi_pkg.name: {{ ans_pypi_pkg.name }}"
          - "ans_pypi_pkg.state: {% if ans_pypi_pkg.state is defined %}{{ ans_pypi_pkg.state }}{% endif %}"
          - "ans_pypi_pkg.version: {% if ans_pypi_pkg.version is defined %}{{ ans_pypi_pkg.version }}{% endif %}"
          - "ans_pypi_system_version_present: {{ ans_pip_system_existing | community.general.json_query(ans_pypi_jmespath_query) }}"
          - "ans_pypi_user_version_present: {{ ans_pip_user_existing | community.general.json_query(ans_pypi_jmespath_query) }}"
        verbosity: 1
      loop: "{{ ans_pypi_pkgs }}"
      loop_control:
        loop_var: ans_pypi_pkg
        label: "{{ ans_pypi_pkg.name }}"

    - name: Please manually remove these pip installed packages
      ansible.builtin.fail:
        msg: "pip uninstall {{ ans_pypi_pkg.name }}"
      loop: "{{ ans_pypi_pkgs }}"
      loop_control:
        loop_var: ans_pypi_pkg
        label: "{{ ans_pypi_pkg.name }}"
      when:
        - ans_pip_user_existing | community.general.json_query(ans_pypi_jmespath_query) is defined
        - ans_pip_user_existing | community.general.json_query(ans_pypi_jmespath_query) | length > 0

    - name: Set a fact for the pipx packages to be injected
      ansible.builtin.set_fact:
        ans_pipx_inject: "{{ ans_pipx_inject + [ ans_pypi_pkg.name + '==' + ans_pypi_pkg.version ] }}"
      when:
        - ans_pypi_pkg.version is defined
        - ( ans_pypi_pkg.state is not defined ) or ( ans_pypi_pkg.state == "present" )
        - ans_pypi_pkg.name != "ansible"
        # - ( ans_pip_system_existing | community.general.json_query(ans_pypi_jmespath_query) is not defined ) or ( ans_pip_system_existing | community.general.json_query(ans_pypi_jmespath_query) is version(ans_pypi_pkg.version, 'lt') )
        # - ( ans_pip_user_existing | community.general.json_query(ans_pypi_jmespath_query) is not defined ) or ( ( ans_pip_user_existing | community.general.json_query(ans_pypi_jmespath_query) is version(ans_pypi_pkg.version, 'lt') )
      loop: "{{ ans_pypi_pkgs }}"
      loop_control:
        loop_var: ans_pypi_pkg
        label: "{{ ans_pypi_pkg.name }}"

    - name: Debug the pipx packages to be injected
      ansible.builtin.debug:
        var: ans_pipx_inject
        verbosity: 1
      when: ans_pipx_inject is defined

    - name: Install Ansible using pipx
      community.general.pipx:
        name: ansible
        source: "ansible=={{ ans_required_version }}"
        install_deps: true
        state: present
        executable: /usr/bin/pipx
      environment: "{{ ans_pipx_env }}"
      when: ans_pipx_list.venvs.ansible.metadata.main_package.package_version is not defined

    - name: Upgrade Ansible using pipx
      community.general.pipx:
        name: ansible
        source: "ansible=={{ ans_required_version }}"
        install_deps: true
        state: upgrade
        executable: /usr/bin/pipx
      environment: "{{ ans_pipx_env }}"
      when:
        - ans_pipx_list.venvs.ansible.metadata.main_package.package_version is defined
        - ans_pipx_list.venvs.ansible.metadata.main_package.package_version is version(ans_required_version, 'lt')

    - name: Run pipx list
      ansible.builtin.command: pipx list --include-injected --json
      environment: "{{ ans_pipx_env }}"
      check_mode: false
      changed_when: false
      register: ans_pipx_list_json

    - name: Set a fact for the pipx list results
      ansible.builtin.set_fact:
        ans_pipx_list: "{{ ans_pipx_list_json.stdout | from_json }}"

    - name: Debug pipx list results
      ansible.builtin.debug:
        var: ans_pipx_list
        verbosity: 2

    - name: Debug existing pipx installed Ansible version
      ansible.builtin.debug:
        var: ans_pipx_list.venvs.ansible.metadata.main_package.package_version
        verbosity: 1
      when: ans_pipx_list.venvs.ansible.metadata.main_package.package_version is defined

    - name: Inject PyPI packages into the Ansible venv
      community.general.pipx:
        name: ansible
        inject_packages: "{{ ans_pipx_inject }}"
        state: inject
      environment: "{{ ans_pipx_env }}"
      when:
        - ans_pipx_list.venvs.ansible.metadata.main_package.package_version is defined
        - ans_pipx_list.venvs.ansible.metadata.main_package.package_version is version(ans_required_version, 'eq')

    # TODO
    # symlink ~/.local/venvs/ansible/bin files from ~/.local/bin

  tags:
    - ansible
...
