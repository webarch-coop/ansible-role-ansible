# Copyright 2019-2023 Chris Croome
#
# This file is part of the Webarchitects Ansible role.
#
# The Webarchitects Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: PyPI packages configured using pipx
  block:

    - name: Check for packages installed via pip
      block:

        - name: Debug pip packages
          ansible.builtin.debug:
            msg:
              - "ans_pypi_pkg.name: {{ ans_pypi_pkg.name }}"
              - "ans_pypi_pkg.state: {% if ans_pypi_pkg.state is defined %}{{ ans_pypi_pkg.state }}{% endif %}"
              - "ans_pypi_pkg.version: {% if ans_pypi_pkg.version is defined %}{{ ans_pypi_pkg.version }}{% endif %}"
              - "ans_pypi_system_version_present: {{ ans_pip_system_existing | community.general.json_query(ans_pypi_pkg_version_jmespath_query) }}"
              - "ans_pypi_user_version_present: {{ ans_pip_user_existing | community.general.json_query(ans_pypi_pkg_version_jmespath_query) }}"
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
          loop: "{{ ans_pypi_pkgs }}"
          loop_control:
            loop_var: ans_pypi_pkg
            label: "{{ ans_pypi_pkg.name }}"

        - name: Set a fact for the pip user packages that should be removed
          ansible.builtin.set_fact:
            ans_pypi_pkg_uninstall: "{{ ans_pip_user_existing | selectattr('name' }}"

        - name: User pip packages need to be removed with the following command
          ansible.builtin.fail:
            msg: "python3 -m pip uninstall{% for ans_pypi_pkg in ans_pypi_pkg_uninstall %} {{ ans_pypi_pkg }}{% endfor %}{% if ans_python_version is version('3.11.2', 'ge') %} --break-system-packages{% endif %}"
          when: ans_python_version is version('3.11.2', 'lt')

      when:
        - ans_pip_user_existing is defined
        - ans_pip_user_existing != []

    - name: Debug the required Ansible state
      ansible.builtin.debug:
        var: ans_required_state
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Install Ansible using pipx
      community.general.pipx:
        name: ansible
        source: "ansible=={{ ans_required_version }}"
        install_deps: true
        state: install
        executable: /usr/bin/pipx
      environment: "{% if ansible_effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
      register: ans_pipx_ansible_installed
      when:
        - ans_required_state == "present"
        - ( ans_pipx_ansible_version is not defined ) or ( ( ans_pipx_ansible_version is defined ) and ( ans_pipx_ansible_version | length == 0 ) )
        - ( ( not ans_downgrade | bool ) and ( ans_required_version is version(ans_installed_version, 'gt') ) ) or ( ( ans_downgrade | bool ) and ( ans_required_version is version(ans_installed_version, 'lt') ) )

    - name: Upgrade Ansible using pipx
      community.general.pipx:
        name: ansible
        source: "ansible=={{ ans_required_version }}"
        install_deps: true
        state: upgrade
        executable: /usr/bin/pipx
      environment: "{% if ansible_effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
      register: ans_pipx_ansible_upgraded
      when:
        - ans_required_state == "present"
        - ans_pipx_ansible_state is defined
        - ans_pipx_ansible_state | length > 0
        - ans_pipx_ansible_state == "present"
        - ans_pipx_ansible_version is defined
        - ans_pipx_ansible_version | length > 0
        - ans_pipx_ansible_version is version(ans_required_version, 'lt')

    - name: Downgrade Ansible using pipx
      block:

        - name: Remove Ansible using pipx
          community.general.pipx:
            name: ansible
            state: absent
            executable: /usr/bin/pipx

        - name: Install Ansible using pipx
          community.general.pipx:
            name: ansible
            source: "ansible=={{ ans_required_version }}"
            install_deps: true
            state: install
            executable: /usr/bin/pipx
          environment: "{% if ansible_effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
          register: ans_pipx_ansible_installed

      when:
        - ans_downgrade | bool
        - ans_required_version is version(ans_installed_version, 'ne')
        - ans_pipx_ansible_version is defined
        - ans_pipx_ansible_version | length > 0
        - ans_required_version is version(ans_pipx_ansible_version, 'lt')

    - name: Remove Ansible using pipx
      community.general.pipx:
        name: ansible
        state: absent
        executable: /usr/bin/pipx
      register: ans_pipx_ansible_removed
      when:
        - ans_pipx_ansible_version is defined
        - ans_pipx_ansible_version | length > 0
        - ( ans_required_state == "absent" ) or ( ( ans_required_state == "present" ) and ( ans_installed_version is version(ans_required_version, 'eq') ) )

    - name: Regather pipx_info
      community.general.pipx_info:
        include_deps: true
        include_injected: true
      environment: "{% if ansible_effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
      register: ans_pipx_info
      when: >-
        ( ( ans_pipx_ansible_installed is defined ) and ( ans_pipx_ansible_installed.changed | bool ) ) or
        ( ( ans_pipx_ansible_removed is defined ) and ( ans_pipx_ansible_removed.changed | bool ) ) or
        ( ( ans_pipx_ansible_upgraded is defined ) and ( ans_pipx_ansible_upgraded.changed | bool ) )

    - name: Debug pipx info
      ansible.builtin.debug:
        var: ans_pipx_info
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Inject packages into the Ansible pipx venv when it exists
      block:

        - name: Set a fact for the pipx Ansible version and injected packages
          ansible.builtin.set_fact:
            ans_pipx_ansible_version: "{{ ans_pipx_info | community.general.json_query(ans_pipx_ansible_version_jmespath_query) }}"
            ans_pipx_injected: "{{ ans_pipx_info | community.general.json_query(ans_pipx_injected_packages_jmespath_query) | dict2items(key_name='name', value_name='version') }}"

        - name: Debug pipx Ansible version
          ansible.builtin.debug:
            var: ans_pipx_ansible_version
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
          when: ans_pipx_ansible_version is defined

        - name: Debug pipx injected packages
          ansible.builtin.debug:
            var: ans_pipx_injected
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
          when: ans_pipx_injected is defined

        - name: Set a fact for the pipx packages, extras and versions to be injected
          ansible.builtin.set_fact:
            ans_pipx_inject: "{{ ans_pipx_inject + [ans_pipx_inject_pkg] }}"
          when:
            - ans_pypi_pkg.name != "ansible"
            - ans_pypi_pkg.venv is defined
            - ans_pypi_pkg.venv == "ansible"
            - ans_pypi_pkg.version is defined
            - ( ans_pypi_pkg.state is not defined ) or ( ans_pypi_pkg.state is regex('^forcereinstall|present$') )
          vars:
            ans_pipx_inject_pkg: "{{ ans_pypi_pkg.name }}{% if ans_pypi_pkg.extras is defined %}[{% for extra in ans_pypi_pkg.extras %}{{ extra }}{% if not loop.last %},{% endif %}{% endfor %}]{% endif %}=={{ ans_pypi_pkg.version }}"
          loop: "{{ ans_pypi_pkgs }}"
          loop_control:
            loop_var: ans_pypi_pkg
            label: "{{ ans_pypi_pkg.name }}"

        - name: Debug the pipx packages to be injected
          ansible.builtin.debug:
            var: ans_pipx_inject
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
          when: ans_pipx_inject is defined

        - name: Inject PyPI packages into the Ansible venv
          community.general.pipx:
            name: ansible
            inject_packages: "{{ ans_pipx_inject }}"
            state: inject
          environment: "{% if ansible_effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
          register: ans_pipx_ansible_injected
          when:
            - ans_pipx_inject is defined
            - ans_pipx_inject != []

        - name: Gather pipx_info
          community.general.pipx_info:
            include_deps: true
            include_injected: true
          environment: "{% if ansible_effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
          register: ans_pipx_info
          when:
            - ans_pipx_ansible_injected is defined
            - ans_pipx_ansible_injected.changed | bool

        - name: Debug pipx info
          ansible.builtin.debug:
            var: ans_pipx_info
            verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

        # TODO
        # symlink ~/.local/venvs/ansible/bin files from ~/.local/bin

      when: ans_pipx_info.applications.ansible is defined

    - name: PyPI packages configured using pipx when not already available as system packages and not injected into the Ansible venv
      ansible.builtin.include_tasks: pipx_pkg.yml
      loop: "{{ ans_pypi_pkgs }}"
      loop_control:
        loop_var: ans_pypi_pkg
        label: "{{ ans_pypi_pkg.name }}"
      vars:
        ans_pypi_pkg_existing_version: "{{ ans_pip_system_existing | community.general.json_query(ans_pypi_pkg_version_jmespath_query) }}"
      when:
        - ans_pypi_pkg.name != "ansible"
        - ( ans_pypi_pkg.venv is not defined ) or ( ( ans_pypi_pkg.venv is defined ) and ( ans_pypi_pkg.venv != "ansible" ) )
        - ( ans_pypi_pkg_existing_version is not defined ) or ( ans_pypi_pkg_existing_version | length == 0 ) or  ( ( ans_pypi_pkg_existing_version is defined ) and ( ans_pypi_pkg_existing_version is version(ans_pypi_pkg.version, 'ne') ) )

  tags:
    - ansible
...
