# Copyright 2019-2023 Chris Croome
#
# This file is part of the Webarchitects Ansible role.
#
# The Webarchitects Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Check variables
  block:

    - name: Debug the Ansible version
      ansible.builtin.debug:
        var: ansible_version

    - name: Debug the Pythin version
      ansible.builtin.debug:
        var: ansible_playbook_python

    # When in a docker container ans_init.stdout == "sh"
    - name: Check if system has been booted with systemd as init system
      ansible.builtin.command: ps -p 1 -o comm=
      changed_when: false
      check_mode: false
      register: ans_ps

    - name: Set a fact for the init system
      ansible.builtin.set_fact:
        ans_init: "{{ ans_ps.stdout }}"

    - name: Debug the ini system when it is not systemd
      ansible.builtin.debug:
        var: ans_init
      when: ans_init != "systemd"

    - name: Stat system ansible
      ansible.builtin.stat:
        path: "{{ ans_ansible_path }}"
      register: ans_stat_ansible

    - name: Ansible needs to be installed
      ansible.builtin.assert:
        that:
          - ans_stat_ansible.stat.exists | bool
        fail_msg: "Please install Ansible!"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Get the apt package facts
      ansible.builtin.package_facts:
        manager: apt

    - name: Debug the installed ansible package version string
      ansible.builtin.debug:
        var: ansible_facts.packages.ansible[0].version
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Set a fact for the .deb package ansible version
      ansible.builtin.set_fact:
        ans_installed_version: "{{ ansible_facts.packages.ansible[0].version | regex_replace('[+].*$') | string }}"

    - name: Ansible installed version
      ansible.builtin.debug:
        var: ans_installed_version
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Debug ans_required_state variable type
      ansible.builtin.debug:
        msg: "{{ ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_state_jmespath_query) | type_debug }}"
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Set a fact for the required Ansible state and version
      ansible.builtin.set_fact:
        ans_required_state: "{% if ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_state_jmespath_query) | type_debug == 'NoneType' %}present{% else %}{{ ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_state_jmespath_query) }}{% endif %}"
        ans_required_version: "{{ ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_version_jmespath_query) }}"

    - name: Debug the required Ansible state
      ansible.builtin.debug:
        var: ans_required_state
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Debug the required Ansible version
      ansible.builtin.debug:
        var: ans_required_version
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Check ansible-core .deb version present
      block:

        - name: Debug the installed ansible-core package version string
          ansible.builtin.debug:
            msg: "{{ ansible_facts.packages | community.general.json_query(ans_deb_version_jmespath_query) }}"
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

        - name: Set a fact for the .deb package ansible-core version
          ansible.builtin.set_fact:
            ans_core_installed_version: "{{ ansible_facts.packages | community.general.json_query(ans_deb_version_jmespath_query) | regex_replace('[-][0-9]$') | string }}"

        - name: Ansible core installed version
          ansible.builtin.debug:
            var: ans_core_installed_version
            verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

      when: ansible_facts.packages | community.general.json_query(ans_deb_name_jmespath_query) == "ansible-core"

    - name: Check that the installed version of Ansible is greater than or equal to the minimum version required when ansible-core is not present
      ansible.builtin.assert:
        that:
          - ans_installed_version is version(ans_ansible_min_version, 'ge')
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: ans_core_installed_version is not defined

    - name: Check that the installed version of Ansible is greater than or equal to the minimum version required when ansible-core is present
      ansible.builtin.assert:
        that:
          - ans_core_installed_version is version(ans_ansible_min_version, 'ge')
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: ans_core_installed_version is defined

    - name: Check the version of python3
      ansible.builtin.command: python3 --version
      check_mode: false
      changed_when: false
      register: ans_python_version_check

    - name: Set a fact for the version of python3
      ansible.builtin.set_fact:
        ans_python_version: "{{ ans_python_version_check.stdout_lines[0].split(' ') | community.general.json_query('[1]') }}"

    - name: Debug the python3 version
      ansible.builtin.debug:
        var: ans_python_version
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Check that the URL and version of the PyPI packages are specified when the state is not set to absent
      ansible.builtin.assert:
        that:
          - ans_pypi_pkg.url is defined
          - ans_pypi_pkg.version is defined
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: >-
        ( ans_pypi_pkg.state is not defined ) or
        ( ( ans_pypi_pkg.state is defined ) and ( ans_pypi_pkg.state != "absent" ) )
      loop: "{{ ans_pypi_pkgs }}"
      loop_control:
        loop_var: ans_pypi_pkg
        label: "{{ ans_pypi_pkg.name }}"

    - name: Debug the installed pipx version string
      ansible.builtin.debug:
        var: ansible_facts.packages.pipx[0].version
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Set a fact for the pipx version
      ansible.builtin.set_fact:
        ans_pipx_version: "{{ ansible_facts.packages.pipx[0].version | regex_replace('[-~].*$') | string }}"

    - name: Pipx installed version
      ansible.builtin.debug:
        var: ans_pipx_version
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Pipx checks
      block:

        - name: Set a fact to indicate that pipx, rather than pip is to be use to install PyPi packages
          ansible.builtin.set_fact:
            ans_pipx: true
          when: ans_installed_version is version(ans_required_version, 'lt')

        - name: Debug ans_pipx variable
          ansible.builtin.debug:
            var: ans_pipx
            verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"
          when: ans_pipx is defined

        - name: Include pipx list tasks as community.general >= 5.6.0 is not present so the community.general.pipx_info module cannot be used
          ansible.builtin.include_tasks: check_pipx_list.yml
          when: not ans_pipx_mod_info | bool

        - name: Include community.general.pipx_info module tasks as community.general >= 5.6.0 is present
          ansible.builtin.include_tasks: check_pipx_info.yml
          when: ans_pipx_mod_info | bool

        - name: Check that venv is not set to the package name when defined and that the venv is set to exist
          ansible.builtin.assert:
            that:
              - ans_pypi_pkg.venv != ans_pypi_pkg.name
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ans_pypi_pkg.venv is defined
          loop: "{{ ans_pypi_pkgs }}"
          loop_control:
            loop_var: ans_pypi_pkg
            label: "{{ ans_pypi_pkg.name }}"

      when: ans_pipx_version is version('1.0.0', 'ge')

    - name: Check the version of pip
      ansible.builtin.command: python3 -m pip --version
      check_mode: false
      changed_when: false
      register: ans_pip_version_check

    - name: Set a fact for the version of pip
      ansible.builtin.set_fact:
        ans_pip_version: "{{ ans_pip_version_check.stdout_lines[0].split(' ') | community.general.json_query('[1]') }}"

    - name: Pip installed version
      ansible.builtin.debug:
        var: ans_pip_version
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Pip inspect metadata
      block:

        - name: Run pip inspect
          ansible.builtin.command: python3 -m pip inspect
          check_mode: false
          changed_when: false
          register: ans_pip_inspect

        - name: Set a fact for the pip metadata
          ansible.builtin.set_fact:
            ans_pip_metadata: "{{ ans_pip_inspect.stdout | from_json | community.general.json_query('installed[].metadata') }}"

      when: ans_pip_version is version('22.2', 'ge')

    - name: Check the user PyPI packages
      ansible.builtin.command: python3 -m pip list --user --format=json
      check_mode: false
      changed_when: false
      register: ans_pip_user_list

    - name: Set a fact for the user PyPI packages present
      ansible.builtin.set_fact:
        ans_pip_user_existing: "{{ ans_pip_user_list.stdout | ansible.builtin.from_json }}"

    - name: Debug user PyPI packages present
      ansible.builtin.debug:
        var: ans_pip_user_existing
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Check the system PyPI packages
      ansible.builtin.command: python3 -m pip list --format=json
      check_mode: false
      changed_when: false
      register: ans_pip_system_list

    # Omit the user packages from this list as they will be included
    - name: Set a fact for the system PyPI packages present
      ansible.builtin.set_fact:
        ans_pip_system_existing: "{{ ans_pip_system_list.stdout | ansible.builtin.from_json | ansible.builtin.difference(ans_pip_user_existing) }}"

    - name: Debug system PyPI packages present
      ansible.builtin.debug:
        var: ans_pip_system_existing
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Include checks for the system installed version of ansible-galaxy
      ansible.builtin.include_tasks: check_system_galaxy.yml

    - name: Check if a user installed ansible-galaxy exists
      ansible.builtin.stat:
        path: "{{ ans_user_bin }}/ansible-galaxy"
      register: ans_user_galaxy_presence

    - name: Include checks for the user installed version of ansible-galaxy
      ansible.builtin.include_tasks: check_user_galaxy.yml
      when: ans_user_galaxy_presence.stat.exists | bool

    - name: Set a fact for the ansible-galaxy version to use
      ansible.builtin.set_fact:
        ans_galaxy_path: "{% if ans_user_galaxy_version is defined and ans_user_galaxy_version is version(ans_system_galaxy_version, 'gt') %}{{ ans_user_galaxy_path }}{% else %}{{ ans_system_galaxy_path }}{% endif %}"

    - name: Debug the ansible-galaxy path to use
      ansible.builtin.debug:
        var: ans_galaxy_path
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Set a fact when Ansible collection community.general 3.5.0 or greater is available as than means community.general.ansible_galaxy_install can be used
      ansible.builtin.set_fact:
        ans_galaxy_install_mod: true
      when: >-
        ( ( ans_system_galaxy_install_mod is defined ) and ( ans_system_galaxy_install_mod | bool ) ) or
        ( ( ans_user_galaxy_install_mod is defined ) and ( ans_user_galaxy_install_mod | bool ) )

    - name: Debug ans_galaxy_install_mod
      ansible.builtin.debug:
        var: ans_galaxy_install_mod
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Set a fact when Ansible collection community.general 3.8.0 or greater is available as than means community.general.pipx can be used
      ansible.builtin.set_fact:
        ans_pipx_mod: true
      when: >-
        ( ( ans_system_pipx_mod is defined ) and ( ans_system_pipx_mod | bool ) ) or
        ( ( ans_user_pipx_mod is defined ) and ( ans_user_pipx_mod | bool ) )

    - name: Debug ans_pipx_mod
      ansible.builtin.debug:
        var: ans_pipx_mod
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Set a fact when Ansible collection community.general 5.6.0 or greater is available as that means community.general.pipx_info can be used
      ansible.builtin.set_fact:
        ans_pipx_mod_info: true
      when: >-
        ( ( ans_system_pipx_mod_info is defined ) and ( ans_system_pipx_mod_info | bool ) ) or
        ( ( ans_user_pipx_mod_info is defined ) and ( ans_user_pipx_mod_info | bool ) )

    - name: Debug ans_pipx_mod_info
      ansible.builtin.debug:
        var: ans_galaxy_install_mod
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Set a fact when Ansible collection community.general 6.2.0 or greater is available
      ansible.builtin.set_fact:
        ans_comgen: true
      when: >-
        ( ( ans_system_comgen is defined ) and ( ans_system_comgen | bool ) ) or
        ( ( ans_user_comgen is defined ) and ( ans_user_comgen | bool ) )

    - name: Debug ans_comgen
      ansible.builtin.debug:
        var: ans_comgen
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Include PATH and python-argcomplete check when the init system is not sh
      ansible.builtin.include_tasks: check_bash.yml
      when: ans_init != "sh"

  tags:
    - ansible
...
