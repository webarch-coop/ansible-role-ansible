---
- name: Check variables
  block:

    - name: Stat ansible
      ansible.builtin.stat:
        path: "{{ ans_ansible_path }}"
      register: ans_stat_ansible

    - name: Ansible needs to be installed
      ansible.builtin.assert:
        that:
          - ans_stat_ansible.stat.exists | bool
        fail_msg: "Please install Ansible!"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Get the apt package facts
      ansible.builtin.package_facts:
        manager: apt

    - name: Debug the installed Ansible package version string
      ansible.builtin.debug:
        var: ansible_facts.packages.ansible[0].version
        verbosity: 1

    - name: Set a fact for the .deb package Ansible version
      ansible.builtin.set_fact:
        ans_installed_version: "{{ ansible_facts.packages.ansible[0].version | regex_replace('[+].*$') | string }}"

    - name: Ansible installed version
      ansible.builtin.debug:
        var: ans_installed_version
        verbosity: 1

    - name: Check that the installed version of Ansible is greater than or equal to the minimum version required
      ansible.builtin.assert:
        that:
          - ans_installed_version is version(ans_ansible_min_version, '>=')
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Check the ini system
      ansible.builtin.command: ps -p 1 -o comm=
      changed_when: false
      check_mode: false
      register: ans_init

    - name: Check init system
      ansible.builtin.fail:
        fail_msg: "Init: {{ ans_init.stdout }}"

    - name: Check the system PyPI packages
      ansible.builtin.command: python3 -m pip list --format=json
      check_mode: false
      changed_when: false
      register: ans_pip_system_list

    - name: Set a fact for the system PyPI packages present
      ansible.builtin.set_fact:
        ans_pip_system_existing: "{{ ans_pip_system_list.stdout | ansible.builtin.from_json }}"

    - name: Debug system PyPI packages present
      ansible.builtin.debug:
        var: ans_pip_system_existing
        verbosity: 2

    - name: Check the user PyPI packages
      ansible.builtin.command: python3 -m pip list --user --format=json
      check_mode: false
      changed_when: false
      register: ans_pip_user_list

    - name: Set a fact for the user PyPI packages present
      ansible.builtin.set_fact:
        ans_pip_user_existing: "{{ ans_pip_user_list.stdout | ansible.builtin.from_json }}"

    - name: Debug user PyPI packages present
      ansible.builtin.debug:
        var: ans_pip_user_existing
        verbosity: 2

    - name: Check Ansible Galaxy collections
      ansible.builtin.command: "{{ ans_ansible_galaxy_path }} collection list --format=json"
      check_mode: false
      changed_when: false
      register: ans_galaxy_col_list

    - name: Debug Ansible Galaxy collections
      ansible.builtin.debug:
        var: ans_galaxy_col_list.stdout
        verbosity: 2

    - name: Set a fact for the Ansible Galaxy collections present
      ansible.builtin.set_fact:
        ans_col_existing: "{{ ans_galaxy_col_list.stdout | from_json }}"

    - name: Debug ans_col_existing
      ansible.builtin.debug:
        var: ans_col_existing
        verbosity: 3

    - name: Set a fact for the lists of Ansible Galaxy system collections existing
      ansible.builtin.set_fact:
        ans_system_col_existing: "{{ ans_col_existing[ans_col_path_system] | dict2items(key_name='name') | community.general.json_query(ans_col_list_jmespath_query) }}"
      when: ans_col_existing[ans_col_path_system] is defined

    - name: Set a fact for the lists of Ansible Galaxy user collections existing
      ansible.builtin.set_fact:
        ans_user_col_existing: "{{ ans_col_existing[ans_col_path_users] | dict2items(key_name='name') | community.general.json_query(ans_col_list_jmespath_query) }}"
      when: ans_col_existing[ans_col_path_users] is defined

    - name: Debug ans_system_col_existing
      ansible.builtin.debug:
        var: ans_system_col_existing
        verbosity: 2
      when: ans_system_col_existing is defined

    - name: Debug ans_user_col_existing
      ansible.builtin.debug:
        var: ans_user_col_existing
        verbosity: 2
      when: ans_user_col_existing is defined

    - name: Check python3-argcomplete
      block:

        - name: Check the files in the python3-argcomplete package
          ansible.builtin.command: dpkg -L python3-argcomplete
          check_mode: false
          changed_when: false
          register: ans_dpkg_argcomplete

        - name: Set a fact for the path to activate-global-python-argcomplete
          ansible.builtin.set_fact:
            ans_argcomplete_path: "{% if '/usr/bin/activate-global-python-argcomplete3' in ans_dpkg_argcomplete.stdout_lines %}/usr/bin/activate-global-python-argcomplete3{% elif '/usr/bin/activate-global-python-argcomplete' in ans_dpkg_argcomplete.stdout_lines %}/usr/bin/activate-global-python-argcomplete{% endif %}"

        - name: Debug the path to activate-global-python-argcomplete
          ansible.builtin.debug:
            var: ans_argcomplete_path
            verbosity: 2
          when:
            - ans_argcomplete_path is defined
            - ans_argcomplete_path | length > 0

      when: ( "python3-argcomplete" in ans_pkgs )

    - name: Set a fact for paths in the PATH environmental variable and the ~/.local/bin path
      ansible.builtin.set_fact:
        ans_paths: "{{ (ansible_env.PATH).split(':') }}"
        ans_local_path: "{{ ansible_env.HOME }}/.local/bin"

    - name: Debug the paths in the PATH environmental variable
      ansible.builtin.debug:
        var: ans_paths
        verbosity: 2

  tags:
    - ansible
...
