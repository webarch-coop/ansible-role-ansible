# Copyright 2019-2023 Chris Croome
#
# This file is part of the Webarchitects Ansible role.
#
# The Webarchitects Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Check variables
  block:

    # When in a docker container ans_init.stdout == "sh"
    - name: Check if system has been booted with systemd as init system
      ansible.builtin.command: ps -p 1 -o comm=
      changed_when: false
      check_mode: false
      register: ans_ps

    - name: Set a fact for the init system
      ansible.builtin.set_fact:
        ans_init: "{{ ans_ps.stdout }}"

    - name: Debug the ini system when it is not systemd
      ansible.builtin.debug:
        var: ans_init
      when: ans_init != "systemd"

    - name: Stat ansible
      ansible.builtin.stat:
        path: "{{ ans_ansible_path }}"
      register: ans_stat_ansible

    - name: Ansible needs to be installed
      ansible.builtin.assert:
        that:
          - ans_stat_ansible.stat.exists | bool
        fail_msg: "Please install Ansible!"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Get the apt package facts
      ansible.builtin.package_facts:
        manager: apt

    - name: Debug the installed Ansible package version string
      ansible.builtin.debug:
        var: ansible_facts.packages.ansible[0].version
        verbosity: 1

    - name: Set a fact for the .deb package Ansible version
      ansible.builtin.set_fact:
        ans_installed_version: "{{ ansible_facts.packages.ansible[0].version | regex_replace('[+].*$') | string }}"

    - name: Ansible installed version
      ansible.builtin.debug:
        var: ans_installed_version
        verbosity: 1

    - name: Check that the installed version of Ansible is greater than or equal to the minimum version required
      ansible.builtin.assert:
        that:
          - ans_installed_version is version(ans_ansible_min_version, '>=')
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Check the version of pip
      ansible.builtin.command: python3 -m pip --version
      check_mode: false
      changed_when: false
      register: ans_pip_version_check

    - name: Set a fact for the version of pip
      ansible.builtin.set_fact:
        ans_pip_version: "{{ ans_pip_version_check.stdout_lines[0].split(' ') | community.general.json_query('[1]') }}"

    - name: Pip inspect metadata
      block:

        - name: Run pip inspect
          ansible.builtin.command: python3 -m pip inspect
          check_mode: false
          changed_when: false
          register: ans_pip_inspect

        - name: Set a fact for the pip metadata
          ansible.builtin.set_fact:
            ans_pip_metadata: "{{ ans_pip_inspect.stdout | from_json | community.general.json_query('installed[].metadata') }}"

      when: ans_pip_version is version('22.2', '>=')

    - name: Check the system PyPI packages
      ansible.builtin.command: python3 -m pip list --format=json
      check_mode: false
      changed_when: false
      register: ans_pip_system_list

    - name: Set a fact for the system PyPI packages present
      ansible.builtin.set_fact:
        ans_pip_system_existing: "{{ ans_pip_system_list.stdout | ansible.builtin.from_json }}"

    - name: Debug system PyPI packages present
      ansible.builtin.debug:
        var: ans_pip_system_existing
        verbosity: 2

    - name: Check the user PyPI packages
      ansible.builtin.command: python3 -m pip list --user --format=json
      check_mode: false
      changed_when: false
      register: ans_pip_user_list

    - name: Set a fact for the user PyPI packages present
      ansible.builtin.set_fact:
        ans_pip_user_existing: "{{ ans_pip_user_list.stdout | ansible.builtin.from_json }}"

    - name: Debug user PyPI packages present
      ansible.builtin.debug:
        var: ans_pip_user_existing
        verbosity: 2

    - name: Check if the installed version of ansible-galaxy supports JSON output
      ansible.builtin.command: "{{ ans_ansible_galaxy_path }} collection list --format json"
      check_mode: false
      changed_when: false
      register: ans_galaxy_json
      failed_when: ans_galaxy_json.rc is not ansible.builtin.regex('^0|2$')

    - name: Set a fact for JSON output support in ansible-galaxy
      ansible.builtin.set_fact:
        ans_galaxy_json_output: "{% if ans_galaxy_json.rc == 0 %}true{% else %}false{% endif %}"

    - name: Ansible Galaxy supports JSON output
      block:

        - name: Debug Ansible Galaxy collections
          ansible.builtin.debug:
            var: ans_galaxy_json.stdout
            verbosity: 2

        - name: Set a fact for the Ansible Galaxy collections present
          ansible.builtin.set_fact:
            ans_col_existing: "{{ ans_galaxy_json.stdout | from_json }}"

        - name: Debug ans_col_existing
          ansible.builtin.debug:
            var: ans_col_existing
            verbosity: 3

        - name: Set a fact for the lists of Ansible Galaxy system collections existing
          ansible.builtin.set_fact:
            ans_system_col_existing: "{{ ans_col_existing[ans_col_path_system] | dict2items(key_name='name') | community.general.json_query(ans_col_list_jmespath_query) }}"
          when: ans_col_existing[ans_col_path_system] is defined

        - name: Set a fact for the lists of Ansible Galaxy user collections existing
          ansible.builtin.set_fact:
            ans_user_col_existing: "{{ ans_col_existing[ans_col_path_user] | dict2items(key_name='name') | community.general.json_query(ans_col_list_jmespath_query) }}"
          when: ans_col_existing[ans_col_path_user] is defined

        - name: Debug ans_system_col_existing
          ansible.builtin.debug:
            var: ans_system_col_existing
            verbosity: 2
          when: ans_system_col_existing is defined

        - name: Debug ans_user_col_existing
          ansible.builtin.debug:
            var: ans_user_col_existing
            verbosity: 2
          when: ans_user_col_existing is defined

      when: ans_galaxy_json_output | bool

    - name: Ansible Galaxy prior to version 2.13.1 doesn't support JSON output
      block:

        - name: Check Ansible Galaxy output
          ansible.builtin.command: "{{ ans_ansible_galaxy_path }} collection list"
          check_mode: false
          changed_when: false
          register: ans_galaxy_txt

        - name: Check Ansible Galaxy system collections
          block:

            - name: Check Ansible Galaxy system collections
              ansible.builtin.shell: >-
                set -e -o pipefail &&
                {{ ans_ansible_galaxy_path }} collection list |
                grep -e '^#[ ]{{ ans_col_path_system }}$' --after-context=1000 |
                grep -v -e '^$' -e '^Collection' -e '^-' -e '^#' |
                sed 's/ /=/' | sed 's/ //g' | jo
              args:
                executable: "{{ ans_bash }}"
              check_mode: false
              changed_when: false
              register: ans_galaxy_col_system_list

            - name: Debug Ansible Galaxy collections
              ansible.builtin.debug:
                var: ans_galaxy_col_system_list.stdout
                verbosity: 2

            - name: Set a fact for the Ansible Galaxy system collections existing
              ansible.builtin.set_fact:
                ans_system_col_existing: "{{ ans_galaxy_col_system_list.stdout | from_json | dict2items(key_name='name', value_name='version') }}"

            - name: Debug system ans_col_existing
              ansible.builtin.debug:
                var: ans_system_col_existing
                verbosity: 2

          when: ans_col_path_system in ans_galaxy_txt.stdout

        - name: Check Ansible Galaxy user collections
          block:

            - name: Check Ansible Galaxy user collections
              ansible.builtin.shell: >-
                set -e -o pipefail &&
                {{ ans_ansible_galaxy_path }} collection list |
                grep -e '^#[ ]{{ ans_col_path_user }}$' --after-context=1000 |
                grep -v -e '^$' -e '^Collection' -e '^-' -e '^#' |
                sed 's/ /=/' | sed 's/ //g' | jo
              args:
                executable: "{{ ans_bash }}"
              check_mode: false
              changed_when: false
              register: ans_galaxy_col_user_list

            - name: Debug Ansible Galaxy collections
              ansible.builtin.debug:
                var: ans_galaxy_col_user_list.stdout
                verbosity: 2

            - name: Set a fact for the Ansible Galaxy user collections existing
              ansible.builtin.set_fact:
                ans_user_col_existing: "{{ ans_galaxy_col_user_list.stdout | from_json | dict2items(key_name='name', value_name='version') }}"

            - name: Debug user ans_col_existing
              ansible.builtin.debug:
                var: ans_user_col_existing
                verbosity: 2

          when: ans_col_path_user in ans_galaxy_txt.stdout

      when: not ans_galaxy_json_output | bool

    - name: Set ans_galaxy_install to true when Ansible Galaxy community.general 6.2.0 or greater is installed as a system collection
      ansible.builtin.set_fact:
        ans_galaxy_install: true
      when:
        - ans_system_col_existing is defined
        - ans_system_col_existing != []
        - ans_system_col_existing | community.general.json_query(ans_col_comgen_jmespath_query) != []
        - ans_system_col_existing | community.general.json_query(ans_col_comgen_ver_jmespath_query) is version('6.2.0', '>=')

    - name: Set ans_galaxy_install to true when community.general 6.2.0 or greater is installed as a user collection
      ansible.builtin.set_fact:
        ans_galaxy_install: true
      when:
        - ans_user_col_existing is defined
        - ans_user_col_existing != []
        - ans_user_col_existing | community.general.json_query(ans_col_comgen_jmespath_query) != []
        - ans_user_col_existing | community.general.json_query(ans_col_comgen_ver_jmespath_query) is version('6.2.0', '>=')

    - name: Debug ans_galaxy_install
      ansible.builtin.debug:
        var: ans_galaxy_install
        verbosity: 2

    - name: Include PATH and python-argcomplete check when the init systetem is not sh
      ansible.builtin.include_tasks: bash_checks.yml
      when: ans_init != "sh"

  tags:
    - ansible
...
