# Copyright 2019-2023 Chris Croome
#
# This file is part of the Webarchitects Ansible role.
#
# The Webarchitects Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Ansible checks
  block:

    - name: Check that the URL and version of the PyPI packages are specified when the state is not set to absent
      ansible.builtin.assert:
        that:
          - ans_pypi_pkg.url is defined
          - ans_pypi_pkg.version is defined
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: >-
        ( ans_pypi_pkg.state is not defined ) or
        ( ( ans_pypi_pkg.state is defined ) and ( ans_pypi_pkg.state != "absent" ) )
      loop: "{{ ans_pypi_pkgs }}"
      loop_control:
        loop_var: ans_pypi_pkg
        label: "{{ ans_pypi_pkg.name }}"

    - name: Check deb packages
      block:

        - name: Read package facts
          ansible.builtin.package_facts:
            manager: apt

        - name: Check the presence of the required packages
          ansible.builtin.assert:
            that:
              - ans_deb_pkg in ansible_facts.packages.keys()
            fail_msg:
              - "The {{ ans_deb_pkg }} is required"
              - "You can install all the requirements using:"
              - "sudo apt install{% for ans_pkg_missing in ans_pkgs %} {{ ans_pkg_missing }}{% endfor %}"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ ans_pkgs }}"
          loop_control:
            loop_var: ans_deb_pkg
          when: ansible_effective_user_id != 0

        - name: Stat system ansible
          ansible.builtin.stat:
            path: "{{ ans_ansible_path }}"
          register: ans_stat_ansible

        - name: "A .deb packaged Ansible should result in a version of ansible being present at {{ ans_ansible_path }}"
          ansible.builtin.assert:
            that:
              - ans_stat_ansible.stat.exists | bool
            fail_msg: "Please install Ansible! 'sudo apt install ansible'"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Check the system ansible to get the ansible-galaxy collections path
          ansible.builtin.command: "{{ ans_ansible_path }} --version"
          check_mode: false
          changed_when: false
          register: ans_system_version_check

        - name: Set a fact for the system installed ansible-galaxy collections path
          ansible.builtin.set_fact:
            ans_col_path_system: "{{ ans_system_version_check.stdout_lines | select('regex', '^  ansible python module location') | community.general.json_query('[0]') | regex_replace('^  ansible python module location = ') | regex_replace('$', '_collections') | trim }}"

        - name: Debug the system installed ansible-galaxy collections path
          ansible.builtin.debug:
            var: ans_col_path_system
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

        - name: Stat the system installed ansible-galaxy collections path
          ansible.builtin.stat:
            path: "{{ ans_col_path_system }}"
          register: ans_col_path_system_check

        - name: The system installed ansible-galaxy python module location should be an existing directory
          ansible.builtin.assert:
            that:
              - ans_col_path_system_check.stat.exists | bool
              - ans_col_path_system_check.stat.isdir | bool
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Include checks for the system installed version of ansible-galaxy
          ansible.builtin.include_tasks: check_system_galaxy.yml

        - name: Get the apt package facts
          ansible.builtin.package_facts:
            manager: apt
          when: ansible_facts.packages is not defined

        - name: Debug the installed ansible package version string
          ansible.builtin.debug:
            var: ansible_facts.packages.ansible[0].version
            verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

        # https://packages.debian.org/bullseye/ansible
        # https://packages.ubuntu.com/jammy/ansible
        - name: Set a fact for the Bullseye and Jammy packaged version of Ansible
          ansible.builtin.set_fact:
            ans_core_installed_version: "2.10.8"
          when:
            - ansible_distribution_release is regex('^bullseye|jammy$')
            - ansible_facts.packages.ansible[0].version == "2.10.7+merged+base+2.10.8+dfsg-1"

        - name: Check the Ansible .deb version when not Bullseye or Jammy
          block:

            - name: Set a fact for the Ansible .deb version
              ansible.builtin.set_fact:
                ans_installed_version: "{{ ansible_facts.packages.ansible[0].version | regex_replace('[+].*$') | string }}"

            - name: Debug the Ansible installed version
              ansible.builtin.debug:
                var: ans_installed_version
                verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

            - name: Check ansible-core .deb version present
              block:

                - name: Debug the installed ansible-core package version string
                  ansible.builtin.debug:
                    msg: "{{ ansible_facts.packages | community.general.json_query(ans_deb_version_jmespath_query) }}"
                    verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

                - name: Set a fact for the .deb package ansible-core version
                  ansible.builtin.set_fact:
                    ans_core_installed_version: "{{ ansible_facts.packages | community.general.json_query(ans_deb_version_jmespath_query) | regex_replace('[-][0-9]$') | string }}"

              when: ansible_facts.packages | community.general.json_query(ans_deb_name_jmespath_query) == "ansible-core"

          when: ansible_distribution_release is not regex('^bullseye|jammy$')

        - name: Ansible core installed version
          ansible.builtin.debug:
            var: ans_core_installed_version
            verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

        - name: Debug the running Ansible version
          ansible.builtin.debug:
            var: ansible_version
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

        - name: Set a fact for the running version of Ansible
          ansible.builtin.set_fact:
            ans_running_version: "{{ ansible_version.full }}"

        - name: This role is designed to be run using the system version of Ansible
          ansible.builtin.assert:
            that:
              - ans_core_installed_version is version(ans_running_version, 'eq')
            fail_msg: "Please run this role using the Ansible version at {{ ans_ansible_path }}-playbook"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

      when: ans_distro_check | bool

    - name: Check the latest Ansible version
      ansible.builtin.include_tasks: pypi_info.yml
      vars:
        ans_pypi_pkg:
          name: ansible
          url: https://pypi.org/pypi/ansible

    - name: Set facts based on the versions of Ansible available and the latest version
      ansible.builtin.set_fact:
        ans_available_versions: "{{ ans_pypi_versions_available }}"
        ans_latest_version: "{{ ans_pypi_version_latest }}"

    - name: Debug the versions of Ansible available
      ansible.builtin.debug:
        var: ans_available_versions
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Debug the latest Ansible version available
      ansible.builtin.debug:
        var: ans_latest_version
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Check the latest Ansible core version
      ansible.builtin.include_tasks: pypi_info.yml
      vars:
        ans_pypi_pkg:
          name: ansible-core
          url: https://pypi.org/pypi/ansible-core

    - name: Set facts based on the versions of Ansible core available and the latest version
      ansible.builtin.set_fact:
        ans_core_available_versions: "{{ ans_pypi_versions_available }}"
        ans_core_latest_version: "{{ ans_pypi_version_latest }}"

    - name: Debug the versions of Ansible core available
      ansible.builtin.debug:
        var: ans_core_available_versions
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Debug the latest Ansible core version available
      ansible.builtin.debug:
        var: ans_core_latest_version
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Set a fact for the required Ansible state
      ansible.builtin.set_fact:
        ans_required_state: "{% if ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_state_jmespath_query) | type_debug == 'NoneType' %}present{% else %}{{ ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_state_jmespath_query) }}{% endif %}"

    - name: Debug the required Ansible state
      ansible.builtin.debug:
        var: ans_required_state
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Set a fact for the required Ansible version
      block:

        - name: Set a fact for the required Ansible version when latest
          ansible.builtin.set_fact:
            ans_required_version: "{{ ans_latest_version }}"
          when: ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_version_jmespath_query) == "latest"

        - name: Set a fact for the required Ansible version when not latest
          ansible.builtin.set_fact:
            ans_required_version: "{{ ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_version_jmespath_query) }}"
          when: ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_version_jmespath_query) != "latest"

      when: ans_required_state is regex('^forcereinstall|present$')

    - name: Debug the required Ansible version
      ansible.builtin.debug:
        var: ans_required_version
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
      when: ans_required_version is defined

    - name: Debug ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_core_version_jmespath_query)
      ansible.builtin.debug:
        msg: "{{ ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_core_version_jmespath_query) }}"
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Debug ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_core_version_jmespath_query) | type_debug
      ansible.builtin.debug:
        msg: "{{ ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_core_version_jmespath_query) | type_debug }}"
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Set a fact for the required version of ansible-core when it is not defined
      ansible.builtin.set_fact:
        ans_core_required_version: "{{ ans_versions | community.general.json_query(ans_version_core_jmespath_query) }}"
      vars:
        ans_version: "{{ ans_required_version }}"
      when: >-
        ( ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_core_version_jmespath_query) is not defined ) or
        ( ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_core_version_jmespath_query) | type_debug == "NoneType" )

    - name: Set a fact for the required version of ansible-core when it is defined and set to latest
      ansible.builtin.set_fact:
        ans_core_required_version: "{{ ans_core_latest_version }}"
      when:
        - ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_core_version_jmespath_query) is defined
        - ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_core_version_jmespath_query) == "latest"
        - ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_core_version_jmespath_query) | type_debug != "NoneType"

    - name: Set a fact for the required version of ansible-core when it is defined and not set to latest
      ansible.builtin.set_fact:
        ans_core_required_version: "{{ ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_core_version_jmespath_query) }}"
      when:
        - ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_core_version_jmespath_query) is defined
        - ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_core_version_jmespath_query) != "latest"
        - ans_pypi_pkgs | community.general.json_query(ans_pypi_ansible_core_version_jmespath_query) | type_debug != "NoneType"

    - name: Check if a user installed ansible exists
      ansible.builtin.stat:
        path: "{{ ans_user_path }}"
      register: ans_user_presence

    - name: Check the version of the user installed version of Ansible when it exists
      block:

        - name: Check the version of the user installed ansible
          ansible.builtin.command: "{{ ans_user_path }} --version"
          check_mode: false
          changed_when: false
          register: ans_user_version_check

        - name: Debug the first line of ans_user_version_check
          ansible.builtin.debug:
            var: ans_user_version_check.stdout_lines[0]
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

        - name: Set a fact for the user installed ansible when core is not in the output
          ansible.builtin.set_fact:
            ans_user_version: "{{ ans_user_version_check.stdout_lines[0].split(' ')[1] | string }}"
          when: ( "core" not in ans_user_version_check.stdout_lines[0] )

        - name: Set a fact for the user installed ansible when core is in the output
          ansible.builtin.set_fact:
            ans_user_version: "{{ ans_user_version_check.stdout_lines[0].split(' ')[2] | regex_replace('[]]$') | string }}"
          when: ( "core" in ans_user_version_check.stdout_lines[0] )

        - name: Debug users ansible version
          ansible.builtin.debug:
            var: ans_user_version
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

        - name: Set a fact for the user installed ansible python module location
          ansible.builtin.set_fact:
            ans_col_path_user: "{{ ans_user_version_check.stdout_lines | select('regex', '^  ansible python module location') | community.general.json_query('[0]') | regex_replace('^  ansible python module location = ') | regex_replace('$', '_collections') | trim }}"

        - name: Debug the user installed ansible python module location
          ansible.builtin.debug:
            var: ans_col_path_user
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

        - name: Check that the user installed ansible-galaxy python module location exists
          ansible.builtin.stat:
            path: "{{ ans_col_path_user }}"
          register: ans_col_path_user_check

        - name: The user installed ansible-galaxy python module location should be an existing directory
          ansible.builtin.assert:
            that:
              - ans_col_path_user_check.stat.exists | bool
              - ans_col_path_user_check.stat.isdir | bool
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Include checks for the user installed version of ansible-galaxy when it is being run
          ansible.builtin.include_tasks: check_user_galaxy.yml
          when: ans_user_version is version(ans_running_version, 'eq')

      when: ans_user_presence.stat.exists | bool

    - name: Debug Ansible version variables
      ansible.builtin.debug:
        msg:
          - "ans_running_version: {{ ans_running_version }}"
          - "ans_core_installed_version:{% if ans_core_installed_version is defined %} {{ ans_core_installed_version }}{% endif %}"
          - "ans_core_installed_version:{% if ans_core_installed_version is defined %} {{ ans_core_installed_version }}{% endif %}"
          - "ans_user_version:{% if ans_user_version is defined %} {{ ans_user_version }}{% endif %}"
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Set facts based on the user version of Ansible as that is the version being run
      block:

        - name: Set facts based on the user version of ansible
          ansible.builtin.set_fact:
            ans_galaxy_path: "{{ ans_user_galaxy_path }}"

        - name: Debug the ansible-galaxy path to use
          ansible.builtin.debug:
            var: ans_galaxy_path
            verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

        - name: Set a fact when Ansible collection community.general 3.5.0 or greater is available as than means community.general.ansible_galaxy_install can be used
          ansible.builtin.set_fact:
            ans_galaxy_install_mod: true
          when:
            - ans_user_galaxy_install_mod is defined
            - ans_user_galaxy_install_mod | bool

        - name: Debug ans_galaxy_install_mod
          ansible.builtin.debug:
            var: ans_galaxy_install_mod
            verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

        - name: Set a fact when Ansible collection community.general 3.8.0 or greater is available as than means community.general.pipx can be used
          ansible.builtin.set_fact:
            ans_pipx_mod: true
          when:
            - ans_user_pipx_mod is defined
            - ans_user_pipx_mod | bool

        - name: Debug ans_pipx_mod
          ansible.builtin.debug:
            var: ans_pipx_mod
            verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

        - name: Set a fact when Ansible collection community.general 5.6.0 or greater is available as that means community.general.pipx_info can be used
          ansible.builtin.set_fact:
            ans_pipx_mod_info: true
          when:
            - ans_user_pipx_mod_info is defined
            - ans_user_pipx_mod_info | bool

        - name: Debug ans_pipx_mod_info
          ansible.builtin.debug:
            var: ans_galaxy_install_mod
            verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

        - name: Set a fact when Ansible collection community.general 6.2.0 or greater is available
          ansible.builtin.set_fact:
            ans_comgen: true
          when:
            - ans_user_comgen is defined
            - ans_user_comgen | bool

        - name: Debug ans_comgen
          ansible.builtin.debug:
            var: ans_comgen
            verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

      when: >-
        ( ( ans_user_version is defined ) and ( ans_user_version is version(ans_running_version, 'eq') ) ) and
        ( ( ( ans_core_installed_version is not defined ) and ( ans_core_installed_version is version(ans_running_version, 'ne') ) ) or
        ( ( ans_core_installed_version is defined ) and ( ans_core_installed_version is version(ans_running_version, 'ne') ) ) )

    - name: Set facts based on the system version of Ansible as that is the version being run
      block:

        - name: Set facts based on the system version of ansible
          ansible.builtin.set_fact:
            ans_galaxy_path: "{{ ans_system_galaxy_path }}"

        - name: Debug the ansible-galaxy path to use
          ansible.builtin.debug:
            var: ans_galaxy_path
            verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

        - name: Set a fact when Ansible collection community.general 3.5.0 or greater is available as than means community.general.ansible_galaxy_install can be used
          ansible.builtin.set_fact:
            ans_galaxy_install_mod: true
          when:
            - ans_system_galaxy_install_mod is defined
            - ans_system_galaxy_install_mod | bool

        - name: Debug ans_galaxy_install_mod
          ansible.builtin.debug:
            var: ans_galaxy_install_mod
            verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

        - name: Set a fact when Ansible collection community.general 3.8.0 or greater is available as than means community.general.pipx can be used
          ansible.builtin.set_fact:
            ans_pipx_mod: true
          when:
            - ans_system_pipx_mod is defined
            - ans_system_pipx_mod | bool

        - name: Debug ans_pipx_mod
          ansible.builtin.debug:
            var: ans_pipx_mod
            verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

        - name: Set a fact when Ansible collection community.general 5.6.0 or greater is available as that means community.general.pipx_info can be used
          ansible.builtin.set_fact:
            ans_pipx_mod_info: true
          when:
            - ans_system_pipx_mod_info is defined
            - ans_system_pipx_mod_info | bool

        - name: Debug ans_pipx_mod_info
          ansible.builtin.debug:
            var: ans_galaxy_install_mod
            verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

        - name: Set a fact when Ansible collection community.general 6.2.0 or greater is available
          ansible.builtin.set_fact:
            ans_comgen: true
          when:
            - ans_system_comgen is defined
            - ans_system_comgen | bool

        - name: Debug ans_comgen
          ansible.builtin.debug:
            var: ans_comgen
            verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

      when:
        - ans_core_installed_version is defined
        - ans_core_installed_version is version(ans_running_version, 'eq')

    - name: Check that the ansible-galaxy version number based variables have been set
      ansible.builtin.assert:
        that:
          - ans_galaxy_path is defined
          - ans_galaxy_install_mod is defined
          - ans_galaxy_install_mod | type_debug == "bool"
          - ans_pipx_mod is defined
          - ans_pipx_mod | type_debug == "bool"
          - ans_pipx_mod_info is defined
          - ans_pipx_mod_info | type_debug == "bool"
          - ans_comgen is defined
          - ans_comgen | type_debug == "bool"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Debug the installed pipx version string
      ansible.builtin.debug:
        var: ansible_facts.packages.pipx[0].version
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Set a fact for the pipx version
      ansible.builtin.set_fact:
        ans_pipx_version: "{{ ansible_facts.packages.pipx[0].version | regex_replace('[-~].*$') | string }}"

    - name: Pipx installed version
      ansible.builtin.debug:
        var: ans_pipx_version
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Pipx checks
      block:

        - name: Debug ans_core_installed_version
          ansible.builtin.debug:
            var: ans_core_installed_version
            verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

        - name: Debug ans_core_required_version
          ansible.builtin.debug:
            var: ans_core_required_version
            verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

        - name: Set a fact to indicate that pipx, rather than pip is to be use to install PyPi packages
          ansible.builtin.set_fact:
            ans_pipx: true
          when: >
            ( ( not ans_downgrade | bool ) and ( ans_core_required_version is version(ans_core_installed_version, 'gt') ) ) or
            ( ( ans_downgrade | bool ) and ( ans_core_required_version is version(ans_core_installed_version, 'lt') ) )

        - name: Debug ans_pipx variable
          ansible.builtin.debug:
            var: ans_pipx
            verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"
          when: ans_pipx is defined

        - name: Include pipx list tasks as community.general >= 5.6.0 is not present so the community.general.pipx_info module cannot be used
          ansible.builtin.include_tasks: check_pipx_list.yml
          when: not ans_pipx_mod_info | bool

        - name: Include community.general.pipx_info module tasks as community.general >= 5.6.0 is present
          ansible.builtin.include_tasks: check_pipx_info.yml
          when: ans_pipx_mod_info | bool

        - name: Check that venv is not set to the package name when defined and that the venv is set to exist
          ansible.builtin.assert:
            that:
              - ans_pypi_pkg.venv != ans_pypi_pkg.name
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ans_pypi_pkg.venv is defined
          loop: "{{ ans_pypi_pkgs }}"
          loop_control:
            loop_var: ans_pypi_pkg
            label: "{{ ans_pypi_pkg.name }}"

      when: ans_pipx_version is version('1.0.0', 'ge')

    - name: Check the version of pip
      ansible.builtin.command: python3 -m pip --version
      check_mode: false
      changed_when: false
      register: ans_pip_version_check

    - name: Set a fact for the version of pip
      ansible.builtin.set_fact:
        ans_pip_version: "{{ ans_pip_version_check.stdout_lines[0].split(' ') | community.general.json_query('[1]') }}"

    - name: Pip installed version
      ansible.builtin.debug:
        var: ans_pip_version
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Pip inspect metadata
      block:

        - name: Run pip inspect
          ansible.builtin.command: python3 -m pip inspect
          check_mode: false
          changed_when: false
          register: ans_pip_inspect

        - name: Set a fact for the pip metadata
          ansible.builtin.set_fact:
            ans_pip_metadata: "{{ ans_pip_inspect.stdout | from_json | community.general.json_query('installed[].metadata') }}"

      when: ans_pip_version is version('22.2', 'ge')

    - name: Check the user PyPI packages
      ansible.builtin.command: python3 -m pip list --user --format=json
      check_mode: false
      changed_when: false
      register: ans_pip_user_list

    - name: Set a fact for the user PyPI packages present
      ansible.builtin.set_fact:
        ans_pip_user_existing: "{{ ans_pip_user_list.stdout | ansible.builtin.from_json }}"

    - name: Debug user PyPI packages present
      ansible.builtin.debug:
        var: ans_pip_user_existing
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: Check the system PyPI packages
      ansible.builtin.command: python3 -m pip list --format=json
      check_mode: false
      changed_when: false
      register: ans_pip_system_list

    # Omit the user packages from this list as they will be included
    - name: Set a fact for the system PyPI packages present
      ansible.builtin.set_fact:
        ans_pip_system_existing: "{{ ans_pip_system_list.stdout | ansible.builtin.from_json | ansible.builtin.difference(ans_pip_user_existing) }}"

    - name: Check the version of Python being used
      ansible.builtin.command: "{{ ansible_playbook_python }} --version"
      check_mode: false
      changed_when: false
      register: ans_python_version_check

    - name: Set a fact for the version of Python being used
      ansible.builtin.set_fact:
        ans_python_version: "{{ ans_python_version_check.stdout_lines[0].split(' ') | community.general.json_query('[1]') }}"

    - name: Debug the Python version being used
      ansible.builtin.debug:
        var: ans_python_version
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Debug system PyPI packages present
      ansible.builtin.debug:
        var: ans_pip_system_existing
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    # When in a docker container ans_init.stdout == "sh"
    - name: Check if system has been booted with systemd as init system
      ansible.builtin.command: ps -p 1 -o comm=
      changed_when: false
      check_mode: false
      register: ans_ps

    - name: Set a fact for the init system
      ansible.builtin.set_fact:
        ans_init: "{{ ans_ps.stdout }}"

    - name: Debug the ini system when it is not systemd
      ansible.builtin.debug:
        var: ans_init
      when: ans_init != "systemd"

    - name: Debug the Python path on the Ansible controler
      ansible.builtin.debug:
        var: ansible_playbook_python
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Include PATH and python-argcomplete check when the init system is not sh
      ansible.builtin.include_tasks: check_bash.yml
      when: ans_init != "sh"

  tags:
    - ansible
...
