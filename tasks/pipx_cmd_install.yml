# Copyright 2019-2023 Chris Croome
#
# This file is part of the Webarchitects Ansible role.
#
# The Webarchitects Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: PyPI packages configured using pipx via the Ansible command module
  block:

    - name: Install Ansible using pipx
      ansible.builtin.command: "{{ ans_pipx_path }} install --include-deps ansible=={{ ans_required_version }}"
      environment: "{% if ansible_effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
      register: ans_pipx_ansible_installed
      when:
        - ans_required_state == "present"
        - ( ans_pipx_ansible_version is not defined ) or ( ( ans_pipx_ansible_version is defined ) and ( ans_pipx_ansible_version | length == 0 ) )
        - ( ( not ans_downgrade | bool ) and ( ans_required_version is version(ans_installed_version, 'gt') ) ) or ( ( ans_downgrade | bool ) and ( ans_required_version is version(ans_installed_version, 'lt') ) )

    - name: Debug ans_pipx_ansible_installed
      ansible.builtin.debug:
        var: ans_pipx_ansible_installed
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
      when: ans_pipx_ansible_installed is defined

    - name: Upgrade Ansible using pipx
      ansible.builtin.command: "{{ ans_pipx_path }} upgrade ansible=={{ ans_required_version }}"
      environment: "{% if ansible_effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
      register: ans_pipx_ansible_upgraded
      when:
        - ans_required_state == "present"
        - ans_pipx_ansible_state is defined
        - ans_pipx_ansible_state | length > 0
        - ans_pipx_ansible_state == "present"
        - ans_pipx_ansible_version is defined
        - ans_pipx_ansible_version | length > 0
        - ans_pipx_ansible_version is version(ans_required_version, 'lt')

    - name: Debug ans_pipx_ansible_upgraded
      ansible.builtin.debug:
        var: ans_pipx_ansible_upgraded
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
      when: ans_pipx_ansible_upgraded is defined

    - name: Downgrade Ansible using pipx
      block:

        - name: Remove Ansible using pipx
          ansible.builtin.command: "{{ ans_pipx_path }} uninstall ansible"
          environment: "{% if ansible_effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
          register: ans_pipx_ansible_downgrade_removed

        - name: Debug ans_pipx_ansible_downgrade_removed
          ansible.builtin.debug:
            var: ans_pipx_ansible_downgrade_removed
            verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
          when: ans_pipx_ansible_downgrade_removed is defined

        - name: Install Ansible using pipx
          ansible.builtin.command: "{{ ans_pipx_path }} install --include-deps ansible=={{ ans_required_version }}"
          environment: "{% if ansible_effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
          register: ans_pipx_ansible_downgrade_installed

        - name: Debug ans_pipx_ansible_downgrade_installed
          ansible.builtin.debug:
            var: ans_pipx_ansible_downgrade_installed
            verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
          when: ans_pipx_ansible_downgrade_installed is defined

      when:
        - ans_downgrade | bool
        - ans_required_version is version(ans_installed_version, 'ne')
        - ans_pipx_ansible_version is defined
        - ans_pipx_ansible_version | length > 0
        - ans_required_version is version(ans_pipx_ansible_version, 'lt')

    - name: Remove Ansible using pipx
      ansible.builtin.command: "{{ ans_pipx_path }} uninstall ansible"
      environment: "{% if ansible_effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
      register: ans_pipx_ansible_removed
      when:
        - ans_pipx_ansible_version is defined
        - ans_pipx_ansible_version | length > 0
        - ( ans_required_state == "absent" ) or ( ( ans_required_state == "present" ) and ( ans_installed_version is version(ans_required_version, 'eq') ) )

    - name: Debug ans_pipx_ansible_removed
      ansible.builtin.debug:
        var: ans_pipx_ansible_removed
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
      when: ans_pipx_ansible_removed is defined

    - name: Include pipx list tasks as community.general >= 5.6.0 is required for community.general.pipx_info module
      ansible.builtin.include_tasks: check_pipx_list.yml
      when: not ans_pipx_mod_info | bool

    - name: Include community.general.pipx_info module tasks as community.general >= 5.6.0
      ansible.builtin.include_tasks: check_pipx_info.yml
      when: ans_pipx_mod_info | bool

    - name: Inject packages into the Ansible pipx venv when it exists
      block:

        - name: Set a fact for the pipx Ansible version and injected packages
          ansible.builtin.set_fact:
            ans_pipx_ansible_version: "{{ ans_pipx_info | community.general.json_query(ans_pipx_info_ansible_version_jmespath_query) }}"
            ans_pipx_injected: "{{ ans_pipx_info | community.general.json_query(ans_pipx_info_injected_pkgs_jmespath_query) | dict2items(key_name='name', value_name='version') }}"

        - name: Debug pipx Ansible version
          ansible.builtin.debug:
            var: ans_pipx_ansible_version
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
          when: ans_pipx_ansible_version is defined

        - name: Debug pipx injected packages
          ansible.builtin.debug:
            var: ans_pipx_injected
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
          when: ans_pipx_injected is defined

        - name: Set a fact for the pipx packages, extras and versions to be injected
          ansible.builtin.set_fact:
            ans_pipx_inject: "{{ ans_pipx_inject + [ans_pipx_inject_pkg] }}"
          when:
            - ans_pypi_pkg.name != "ansible"
            - ans_pypi_pkg.venv is defined
            - ans_pypi_pkg.venv == "ansible"
            - ans_pypi_pkg.version is defined
            - ( ans_pypi_pkg.state is not defined ) or ( ans_pypi_pkg.state is regex('^forcereinstall|present$') )
          vars:
            ans_pipx_inject_pkg: "{{ ans_pypi_pkg.name }}{% if ans_pypi_pkg.extras is defined %}[{% for extra in ans_pypi_pkg.extras %}{{ extra }}{% if not loop.last %},{% endif %}{% endfor %}]{% endif %}=={{ ans_pypi_pkg.version }}"
          loop: "{{ ans_pypi_pkgs }}"
          loop_control:
            loop_var: ans_pypi_pkg
            label: "{{ ans_pypi_pkg.name }}"

        - name: Debug the pipx packages to be injected
          ansible.builtin.debug:
            var: ans_pipx_inject
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
          when: ans_pipx_inject is defined

        - name: Inject PyPI packages into the Ansible venv
          ansible.builtin.command: "{{ ans_pipx_path }} inject --include-apps --include-deps {{ ans_pipx_inject }}"
          environment: "{% if ansible_effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
          register: ans_pipx_ansible_injected
          when:
            - ans_pipx_inject is defined
            - ans_pipx_inject != []

        - name: Debug ans_pipx_ansible_injected
          ansible.builtin.debug:
            var: ans_pipx_ansible_injected
            verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
          when: ans_pipx_ansible_injected is defined

        - name: Include pipx list tasks as community.general >= 5.6.0 is required for community.general.pipx_info module
          ansible.builtin.include_tasks: check_pipx_list.yml
          when: not ans_pipx_mod_info | bool

        - name: Include community.general.pipx_info module tasks as community.general >= 5.6.0
          ansible.builtin.include_tasks: check_pipx_info.yml
          when: ans_pipx_mod_info | bool

        - name: Find executables in the Ansible venv bin
          ansible.builtin.find:
            file_type: file
            follow: false
            path: "{% if ansible_effective_user_id == 0 %}{{ ans_pipx_root_env.PIPX_HOME }}{% else %}{{ ans_pipx_user_env.PIPX_HOME }}{% endif %}/venvs/ansible/bin"
          register: ans_pipx_venv_bin_files

        - name: Debug ans_pipx_venv_bin_files
          ansible.builtin.debug:
            var: ans_pipx_venv_bin_files
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

        - name: Set a fact for the executable paths
          ansible.builtin.set_fact:
            ans_pipx_venv_bin_file_paths: "{{ ans_pipx_venv_bin_files | community.general.json_query(ans_pipx_bin_jmespath_query) }}"

        - name: Debug ans_pipx_venv_bin_file_paths
          ansible.builtin.debug:
            var: ans_pipx_venv_bin_file_paths
            verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

        - name: Ensure all Ansible venv bin files are symlinked
          ansible.builtin.file:
            state: link
            src: "{{ ans_venv_executable }}"
            dest: "{% if ansible_effective_user_id == 0 %}{{ ans_pipx_root_env.PIPX_BIN_DIR }}{% else %}{{ ans_pipx_user_env.PIPX_BIN_DIR }}{% endif %}/{{ ans_venv_executable | ansible.builtin.basename }}"
            follow: false
            mode: 0777
          loop: "{{ ans_pipx_venv_bin_file_paths }}"
          loop_control:
            loop_var: ans_venv_executable
            label: "{{ ans_venv_executable | ansible.builtin.basename }}"

      when:
        - ans_pipx_installed_version is defined
        - ans_pipx_installed_version is version(ans_required_version, 'eq')

  tags:
    - ansible
...
