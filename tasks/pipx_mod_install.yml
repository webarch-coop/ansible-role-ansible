# Copyright 2019-2025 Chris Croome
#
# This file is part of the Webarchitects Ansible role.
#
# The Webarchitects Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: PyPI packages configured using pipx via the Ansible pipx module
  block:

    - name: Install Ansible using pipx
      community.general.pipx:
        executable: "{{ ans_pipx_path }}"
        name: ansible
        source: "ansible=={{ ans_required_version }}"
        install_deps: true
        state: install
      environment: "{% if ansible_facts.effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
      retries: "{{ ans_download.retries }}"
      delay: "{{ ans_download.delay }}"
      register: ans_pipx_ansible_installed
      when:
        - ans_required_state == "present"
        - ( ans_pipx_installed_version is not defined ) or ( ( ans_pipx_installed_version is defined ) and ( ans_pipx_installed_version | length == 0 ) )
        - ( ( not ans_downgrade | bool ) and ( ans_required_version is version(ans_core_installed_version, 'gt') ) ) or ( ( ans_downgrade | bool ) and ( ans_required_version is version(ans_core_installed_version, 'lt') ) )

    - name: Debug ans_pipx_ansible_installed
      ansible.builtin.debug:
        var: ans_pipx_ansible_installed
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
      when: ans_pipx_ansible_installed is defined
      tags:
        - debug

    - name: Upgrade Ansible using pipx
      community.general.pipx:
        executable: "{{ ans_pipx_path }}"
        name: ansible
        source: "ansible=={{ ans_required_version }}"
        install_deps: true
        state: upgrade
      environment: "{% if ansible_facts.effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
      retries: "{{ ans_download.retries }}"
      delay: "{{ ans_download.delay }}"
      register: ans_pipx_ansible_upgraded
      when:
        - ans_required_state == "present"
        - ans_pipx_ansible_state is defined
        - ans_pipx_ansible_state | length > 0
        - ans_pipx_ansible_state == "present"
        - ans_pipx_installed_version is defined
        - ans_pipx_installed_version | length > 0
        - ans_pipx_installed_version is version(ans_required_version, 'lt')

    - name: Debug ans_pipx_ansible_upgraded
      ansible.builtin.debug:
        var: ans_pipx_ansible_upgraded
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
      when: ans_pipx_ansible_upgraded is defined
      tags:
        - debug

    - name: Downgrade Ansible using pipx
      block:

        - name: Remove Ansible using pipx
          community.general.pipx:
            executable: "{{ ans_pipx_path }}"
            name: ansible
            state: absent
          environment: "{% if ansible_facts.effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
          register: ans_pipx_ansible_downgrade_removed

        - name: Debug ans_pipx_ansible_downgrade_removed
          ansible.builtin.debug:
            var: ans_pipx_ansible_downgrade_removed
            verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
          when: ans_pipx_ansible_downgrade_removed is defined
          tags:
            - debug

        - name: Install downgrade of Ansible using pipx
          community.general.pipx:
            executable: "{{ ans_pipx_path }}"
            name: ansible
            source: "ansible=={{ ans_required_version }}"
            install_deps: true
            state: install
          environment: "{% if ansible_facts.effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
          retries: "{{ ans_download.retries }}"
          delay: "{{ ans_download.delay }}"
          register: ans_pipx_ansible_downgrade_installed

        - name: Debug ans_pipx_ansible_downgrade_installed
          ansible.builtin.debug:
            var: ans_pipx_ansible_downgrade_installed
            verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
          when: ans_pipx_ansible_downgrade_installed is defined
          tags:
            - debug

      when:
        - ans_downgrade | bool
        - ans_required_version is version(ans_core_installed_version, 'ne')
        - ans_pipx_installed_version is defined
        - ans_pipx_installed_version | length > 0
        - ans_required_version is version(ans_pipx_installed_version, 'lt')

    - name: Remove Ansible using pipx
      community.general.pipx:
        executable: "{{ ans_pipx_path }}"
        name: ansible
        state: absent
      environment: "{% if ansible_facts.effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
      register: ans_pipx_ansible_removed
      when:
        - ans_pipx_installed_version is defined
        - ans_pipx_installed_version | length > 0
        - ( ans_required_state == "absent" ) or ( ( ans_required_state == "present" ) and ( ans_core_installed_version is version(ans_required_version, 'eq') ) )

    - name: Debug ans_pipx_ansible_removed
      ansible.builtin.debug:
        var: ans_pipx_ansible_removed
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
      when: ans_pipx_ansible_removed is defined
      tags:
        - debug

    - name: Check variables
      ansible.builtin.include_tasks: checks.yml

    # If a version of ansible-core specified is difference from the one provided by the the ansible package then it will be wrong version as --force is not used
    - name: Check and inject ansible-core version in pipx venv
      block:

        - name: Set a fact for the ansible-core version that might need to be injected with force
          ansible.builtin.set_fact:
            ans_core_inject_version: "{{ ans_versions | community.general.json_query(ans_version_core_jmespath_query) }}"
          vars:
            ans_version_core_jmespath_query: "[?ansible=='{{ ans_required_version }}'].core|[0]"

        - name: "Inject into the pipx venv with force ansible-core {{ ans_core_required_version }}"
          community.general.pipx:
            executable: "{{ ans_pipx_path }}"
            name: ansible
            inject_packages: "ansible-core=={{ ans_core_required_version }}"
            state: inject
            install_apps: true
            install_deps: true
            force: true
          environment: "{% if ansible_facts.effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
          when: ans_core_inject_version != ans_core_installed_version

      when:
        - ans_required_version is defined
        - ans_core_installed_version is defined

    - name: Include pipx list tasks as community.general >= 5.6.0 is required for community.general.pipx_info module
      ansible.builtin.include_tasks: check_pipx_list.yml
      when: not ans_pipx_mod_info | bool

    - name: Include community.general.pipx_info module tasks as community.general >= 5.6.0
      ansible.builtin.include_tasks: check_pipx_info.yml
      when: ans_pipx_mod_info | bool

    - name: Inject packages into the Ansible pipx venv when it exists
      block:

        - name: Debug pipx injected packages
          ansible.builtin.debug:
            var: ans_pipx_injected
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
          when: ans_pipx_injected is defined
          tags:
            - debug

        - name: Set an array for the pipx application packages, extras and versions to be injected
          ansible.builtin.set_fact:
            ans_pipx_inject: "{{ ans_pipx_inject + [ans_pipx_inject_pkg] }}"
          when:
            - ans_pypi_pkg.name != "ansible"
            - ans_pypi_pkg.venv is defined
            - ans_pypi_pkg.venv == "ansible"
            - ans_pypi_pkg.version is defined
            - ( ans_pypi_pkg.state is not defined ) or ( ans_pypi_pkg.state is regex('^forcereinstall|present$') )
            - ( ans_pypi_pkg.type is not defined ) or ( ans_pypi_pkg.type == "app" )
          vars:
            ans_pipx_inject_pkg: "{{ ans_pypi_pkg.name }}{% if ans_pypi_pkg.extras is defined %}[{% for extra in ans_pypi_pkg.extras %}{{ extra }}{% if not loop.last %},{% endif %}{% endfor %}]{% endif %}{% if ans_pypi_pkg.version != 'latest' %}=={{ ans_pypi_pkg.version }}{% endif %}"
          loop: "{{ ans_pypi_pkgs }}"
          loop_control:
            loop_var: ans_pypi_pkg
            label: "{{ ans_pypi_pkg.name }}"

        - name: Debug the list of pipx application packages to be injected
          ansible.builtin.debug:
            var: ans_pipx_inject
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
          when: ans_pipx_inject is defined
          tags:
            - debug

        - name: Inject PyPI application packages into the Ansible venv
          community.general.pipx:
            executable: "{{ ans_pipx_path }}"
            name: ansible
            inject_packages: "{{ ans_pipx_inject }}"
            state: inject
            install_apps: true
            install_deps: true
          environment: "{% if ansible_facts.effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
          retries: "{{ ans_download.retries }}"
          delay: "{{ ans_download.delay }}"
          register: ans_pipx_ansible_injected
          when:
            - ans_pipx_inject is defined
            - ans_pipx_inject != []

        - name: Debug ans_pipx_ansible_injected
          ansible.builtin.debug:
            var: ans_pipx_ansible_injected
            verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
          when: ans_pipx_ansible_injected is defined
          tags:
            - debug

        - name: Inject PyPI library packages into the Ansible venv
          community.general.pipx:
            executable: "{{ ans_pipx_path }}"
            name: ansible
            inject_packages: "{{ ans_pypi_pkg.name }}{% if ans_pypi_pkg.extras is defined %}[{% for extra in ans_pypi_pkg.extras %}{{ extra }}{% if not loop.last %},{% endif %}{% endfor %}]{% endif %}{% if ans_pypi_pkg.version != 'latest' %}=={{ ans_pypi_pkg.version }}{% endif %}"
            state: inject
            install_apps: false
            install_deps: false
          environment: "{% if ansible_facts.effective_user_id == 0 %}{{ ans_pipx_root_env | default('') }}{% else %}{{ ans_pipx_user_env | default('') }}{% endif %}"
          retries: "{{ ans_download.retries }}"
          delay: "{{ ans_download.delay }}"
          register: ans_pipx_lib_injected
          when:
            - ans_pypi_pkg.name != "ansible"
            - ans_pypi_pkg.venv is defined
            - ans_pypi_pkg.venv == "ansible"
            - ans_pypi_pkg.version is defined
            - ( ans_pypi_pkg.state is not defined ) or ( ans_pypi_pkg.state is regex('^forcereinstall|present$') )
            - ans_pypi_pkg.type is defined
            - ans_pypi_pkg.type == "lib"
          loop: "{{ ans_pypi_pkgs }}"
          loop_control:
            loop_var: ans_pypi_pkg
            label: "{{ ans_pypi_pkg.name }}"

        - name: Debug ans_pipx_lib_injected
          ansible.builtin.debug:
            var: ans_pipx_lib_injected
            verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
          when: ans_pipx_lib_injected is defined
          tags:
            - debug

        - name: Include pipx list tasks as community.general >= 5.6.0 is required for community.general.pipx_info module
          ansible.builtin.include_tasks: check_pipx_list.yml
          when: not ans_pipx_mod_info | bool

        - name: Include community.general.pipx_info module tasks as community.general >= 5.6.0
          ansible.builtin.include_tasks: check_pipx_info.yml
          when: ans_pipx_mod_info | bool

        - name: Find executables in the Ansible venv bin
          ansible.builtin.find:
            file_type: file
            follow: false
            path: "{% if ansible_facts.effective_user_id == 0 %}{{ ans_pipx_root_env.PIPX_HOME }}{% else %}{{ ans_pipx_user_env.PIPX_HOME }}{% endif %}/venvs/ansible/bin"
          register: ans_pipx_venv_bin_files

        - name: Debug ans_pipx_venv_bin_files
          ansible.builtin.debug:
            var: ans_pipx_venv_bin_files
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
          tags:
            - debug

        - name: Set a fact for the executable paths
          ansible.builtin.set_fact:
            ans_pipx_venv_bin_file_paths: "{{ ans_pipx_venv_bin_files | community.general.json_query(ans_pipx_bin_jmespath_query) }}"

        - name: Debug ans_pipx_venv_bin_file_paths
          ansible.builtin.debug:
            var: ans_pipx_venv_bin_file_paths
            verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
          tags:
            - debug

        - name: Ensure all Ansible venv bin files are symlinked
          ansible.builtin.file:
            state: link
            src: "{{ ans_venv_executable }}"
            dest: "{% if ansible_facts.effective_user_id == 0 %}{{ ans_pipx_root_env.PIPX_BIN_DIR }}{% else %}{{ ans_pipx_user_env.PIPX_BIN_DIR }}{% endif %}/{{ ans_venv_executable | ansible.builtin.basename }}"
            follow: false
            mode: "0777"
          loop: "{{ ans_pipx_venv_bin_file_paths }}"
          loop_control:
            loop_var: ans_venv_executable
            label: "{{ ans_venv_executable | ansible.builtin.basename }}"

      when:
        - ans_pipx_installed_version is defined
        - ans_pipx_installed_version is version(ans_required_version, 'eq')

    # This doesn't really work for packages like ansible-lint or molecule when venv is set to somehting other than ansible
    - name: PyPI packages configured using pipx when not already available as system packages and not injected into the Ansible venv
      ansible.builtin.include_tasks: pipx_pkg.yml
      vars:
        ans_pypi_pkg_existing_version: "{{ ans_pip_system_existing | community.general.json_query(ans_pypi_pkg_version_jmespath_query) }}"
        ans_pypi_pkg_version_jmespath_query: "[?name=='{{ ans_pypi_pkg.name }}'].version|[0]"
      when:
        - ans_pypi_pkg.name != "ansible"
        - ( ans_pypi_pkg.venv is not defined ) or ( ( ans_pypi_pkg.venv is defined ) and ( ans_pypi_pkg.venv != "ansible" ) )
        - ( ans_pypi_pkg_existing_version is not defined ) or ( ans_pypi_pkg_existing_version | length == 0 ) or  ( ( ans_pypi_pkg_existing_version is defined ) and ( ans_pypi_pkg_existing_version is version(ans_pypi_pkg.version, 'ne') ) )
      loop: "{{ ans_pypi_pkgs }}"
      loop_control:
        loop_var: ans_pypi_pkg
        label: "{{ ans_pypi_pkg.name }}"

  tags:
    - ansible
...
